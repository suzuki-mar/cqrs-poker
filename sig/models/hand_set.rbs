class HandSet
  include Comparable

  def self.build_card: (String) -> Card

  # rank_allメソッドを追加
  def self.rank_all: () -> Array[String]

  # 戻り値の型をHashに修正
  def self.rank_names: () -> Hash[String, String]

  def self.valid_hand_set_format?:(untyped) -> bool

  attr_reader cards: Array[Card]
  def self.build: (Array[Card]) -> HandSet
  def self.valid_cards?: (Array[Card]) -> bool
  # nilも返せるように型を修正
  def rebuild_after_exchange: (Card, Card) -> (HandSet | nil)
  def evaluate: () -> String
  def rank_name: () -> String
  def rank_strength: () -> Integer
  def <=>: (HandSet) -> Integer
  def valid?: () -> bool
  def fetch_by_number: (Integer) -> Card
  def include?: (Card) -> bool
  def self.card?: (Card | String) -> bool
  def self.rank_japanese_name: (String) -> String
  

  class Rank
    include ActiveModel::Model
    include ActiveModel::Attributes
    
    attr_accessor name: String?
    
    # 重複定義はしていないがLinterが誤検知をしている
    HIGH_CARD: String
    ONE_PAIR: String
    TWO_PAIR: String
    THREE_OF_A_KIND: String
    STRAIGHT: String
    FLUSH: String
    FULL_HOUSE: String
    FOUR_OF_A_KIND: String
    STRAIGHT_FLUSH: String
    ROYAL_FLUSH: String
    ALL: Array[String]
    NAMES: Hash[String, String]
    def self.japanese_name: (String) -> String
  end

  class Card
    attr_reader number: String
    attr_reader suit: String

    def valid?: () -> bool

    VALID_SUITS: ::Array[String]
    VALID_NUMBERS: ::Array[String]

    def self.generate_available: (?Array[Card]) -> Array[Card]
    def initialize: (String) -> void
    def same_number?: (Card) -> bool
    def to_s: () -> String
    def ==: (untyped) -> bool
    def eql?: (untyped) -> bool
    def hash: () -> Integer

  end

  class Evaluator
    NUMBER_TO_VALUE: Hash[String, Integer]
    
    def self.call: (Array[Card] cards) -> String
      
    def initialize: (Array[Card] cards) -> void
      
    def call: () -> String
      
    private
    
    attr_reader cards: Array[Card]
      
    def build_rank_checks_map: (Array[Card] _cards) -> Hash[String, ::Proc]
      
    def valid_hand?: (Array[Card] cards) -> bool
      
    def straight_flush?: () -> bool
      
    def four_of_a_kind?: () -> bool
      
    def full_house?: () -> bool
      
    def flush?: () -> bool
      
    # values配列は整数のみを含むことを明示する
    # 数値演算を行うstraight?メソッドの定義
    def straight?: () -> bool
  
    def three_of_a_kind?: () -> bool
  
    def two_pair?: () -> bool
  
    def one_pair?: () -> bool
  
    def royal_flush?: () -> bool
  
    def rank_combinations: () -> HandSet::Evaluator::RankCombinations

    def rank_counts: () -> Hash[String, Integer]

    def suits: () -> Array[String]

    def ranks: () -> Array[String]

    # RankCombinationsはEvaluate内部でしか使わない
    class RankCombinations
      def initialize: (Array[Integer] values) -> void

      def pair_count: () -> Integer

      def three_of_a_kind?: () -> bool

      def four_of_a_kind?: () -> bool

      def full_house?: () -> bool
    end
  end

  class SameRankStrengthComparer
    def self.call: (HandSet, HandSet) -> Integer
    def initialize: (HandSet, HandSet) -> void
    def call: () -> Integer

    class Compare
      def initialize: (Array[Integer], Array[Integer]) -> void
      def compare: () -> Integer

      private

      attr_reader values1: Array[Integer]
      attr_reader values2: Array[Integer]

      def nil_compare: (Integer?, Integer?) -> (Integer | nil)
    end

    class MatchedRankNumbersCompareBuilder
      def self.from_pair_hand_set: (HandSet, HandSet) -> Compare
      def self.from_three_of_a_kind_hand_set: (HandSet, HandSet) -> Compare
      def self.from_four_of_a_kind_hand_set: (HandSet, HandSet) -> Compare
      def self.from_straight_hand_set: (HandSet, HandSet) -> Compare

      private

      def self.extract_pair_values: (HandSet) -> Array[Integer]
      def self.extract_three_of_a_kind_value: (HandSet) -> (Integer | nil)
      def self.extract_four_of_a_kind_value: (HandSet) -> (Integer | nil)
      def self.extract_straight_high_card: (HandSet) -> Integer
    end

    class RemainingKindSetNumbersCompareBuilder
      def self.from_high_cards: (HandSet, HandSet) -> Compare
      def self.from_one_pair: (HandSet, HandSet) -> Compare
      def self.from_two_pair: (HandSet, HandSet) -> Compare
      def self.from_three_of_a_kind: (HandSet, HandSet) -> Compare
      def self.from_four_of_a_kind: (HandSet, HandSet) -> Compare

      private

      def self.extract_pair_values: (HandSet) -> Array[Integer]
      def self.extract_three_of_a_kind_value: (HandSet) -> (Integer | nil)
      def self.extract_four_of_a_kind_value: (HandSet) -> (Integer | nil)
    end

    private

    attr_reader hand_set1: HandSet
    attr_reader hand_set2: HandSet

    def compare_high_cards: () -> Integer
    def compare_one_pair: () -> Integer
    def compare_two_pair: () -> Integer
    def compare_three_of_a_kind: () -> Integer
    def compare_straight: () -> Integer
    def compare_full_house: () -> Integer
    def compare_four_of_a_kind: () -> Integer
  end

  private

  def initialize: (Array[Card]) -> void

end
