interface _EventSubscriber
  def handle_event: (_Event event) -> void
end

module ReadModels
  class ProjectionVersions

    def fetch_all_versions: () -> Array[VersionInfo]
    def initialize: (Array[VersionInfo]) -> void
    def self.load: (GameNumber game_number) -> ReadModels::ProjectionVersions
    def self.update_all_versions: (_Event) -> void
    def self.count_group_game_number: () -> Integer

    private
    attr_reader version_infos: Array[VersionInfo]

    class VersionInfo
      attr_reader projection_name: String
      attr_reader last_event_id: EventId
      def initialize: (String, EventId) -> void
    end
  end

  interface _HasLastEventId
    def last_event_id: () -> Integer
    def last_event_id=: (Integer) -> Integer
  end

  class PlayerHandState
    include _HasLastEventId
    include _EventSubscriber

    attr_reader game_number: GameNumber

    def initialize: (Query::PlayerHandState record) -> void
    def start_new_game!: (GameStartedEvent) -> void
    def exchange_card!: (CardExchangedEvent) -> void
    def end_game!: (GameEndedEvent) -> void
    def current_state_for_display: () -> {
      status: String,
      hand: String,
      current_rank: String,
      rank_name: String,
      turn: Integer
    }
    def hand_set: () -> HandSet
    def refreshed_hand_set: () -> HandSet
    def rank_groups: () -> Array[Array[HandSet::Card]]
    def current_turn: () -> Integer

    def self.build_from_event: (GameStartedEvent event) -> PlayerHandState
    def self.load_by_game_number: (GameNumber game_number) -> PlayerHandState
    def self.latest_game_number: () -> GameNumber
    def self.latest_event_id: () -> Integer

    private
    def format_hand: () -> String
    # nilも返せるように型を修正
    def build_exchanged_hand_set: (
      HandSet::Card discarded_card,
      HandSet::Card new_card
    ) -> (HandSet | nil)
    attr_reader player_hand_state: Query::PlayerHandState
  end

  class TrashState
    attr_reader game_number: GameNumber

    def self.load: (GameNumber game_number) -> TrashState
    def initialize: (Query::TrashState) -> void

    def accept!: (
      HandSet::Card card,
      Integer current_turn,
      Integer last_event_id
    ) -> void
    def self.prepare!: (GameNumber game_number, EventId first_event_id) -> void

    def exists?: () -> bool
    #TODO 名前がわかりづらい
    def number?: (HandSet::Card card) -> bool
    def count_same_rank_by_card: (HandSet::Card card) -> Integer
    def count_same_suit_by_card: (HandSet::Card card) -> Integer
    def discarded_cards: () -> Array[HandSet::Card]
    def last_event_id: () -> EventId
    def current_turn: () -> Integer
    def empty?: () -> bool

    private

    def trash_record: () -> Query::TrashState

  end

  class Histories
    def self.load: (GameNumber game_number) -> Array[Query::History]
    def self.add: (HandSet hand_set, GameEndedEvent event) -> Query::History

  end

end

class EventPublisher
  attr_reader published_events: Array[_Event]

  def initialize: (
    projection: EventListener::Projection,
    event_listeners: Array[_EventSubscriber]
  ) -> void
  def broadcast: (String | Symbol, _Event) -> void
  # ライブラリーからインクルードをされるもの
  def subscribe: (untyped) -> void

  private

  attr_reader projection: EventListener::Projection
  attr_reader event_listeners: Array[_EventSubscriber]
end

module EventListener
  class Log
    include _EventSubscriber

    def initialize: (Logger) -> void

    private
    attr_reader logger: Logger
  end

  class Projection
    include _EventSubscriber
    def initialize: () -> void
    private
    def apply_to_player_hand_state: (
      ReadModels::PlayerHandState player_hand_state,
      _Event event
    ) -> void
    def update_projection_versions: (_Event event) -> void
    def update_trash_state: (
      _Event event,
      ReadModels::PlayerHandState player_hand_state
    ) -> void
    def build_player_hand_state: (_Event event) -> ReadModels::PlayerHandState
  end
end

class MessageBuilder
  def self.build_info_message: (_Event event) -> String
  def self.build_warning_message_if_needed: (_Event event) -> String?
  def self.format_event_message: (String, ?String) -> String
  def self.format_cards: (Array[String]) -> String
end

class QueryService
  def initialize: (GameNumber) -> void
  def trash_state: () -> ReadModels::TrashState
  def player_hand_set: () -> HandSet
  def all_projection_versions: () -> Array[ReadModels::ProjectionVersions::VersionInfo]
  def player_hand_summary: () -> {
    hand_set: Array[String],
    rank: Integer?,
    status: String
  }
  def ended_game_recorded?: () -> bool

  def self.latest_game_number: () -> GameNumber
  def self.latest_event_id: () -> Integer
  def self.build_last_game_query_service: () -> QueryService
  def self.last_game_player_hand_summary: () -> {
    hand_set: Array[String],
    rank: Integer?,
    status: String
  }
  def self.number_of_games: () -> Integer

  private
  def projection_versions: () -> ReadModels::ProjectionVersions
  attr_reader game_number: GameNumber
end