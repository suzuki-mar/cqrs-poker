interface _EventSubscriber
  def handle_event: (_Event event) -> void
end

class Projection
  include _EventSubscriber

  def initialize: () -> void
  private
  def apply_to_player_hand_state: (ReadModels::PlayerHandState player_hand_state, _Event event) -> void
end

module ReadModels
  class PlayerHandState
    def initialize: () -> void
    def start_new_game!: (GameStartedEvent) -> void
    def exchange_card!: (CardExchangedEvent) -> void
    def end_game!: (GameEndedEvent) -> void
    def current_state_for_display: () -> { status: String, hand: String, current_rank: String, rank_name: String, turn: Integer }
    def hand_set: () -> HandSet
    def refreshed_hand_set: () -> HandSet    
  end

  class Histories
    def self.load: (?limit: Integer) -> Array[Query::History]
    def self.add: (HandSet hand_set) -> Query::History
  end
end

interface _CardForQuery
  include _Card
end 

class EventPublisher
  def initialize: (projection: Projection, event_listener: LogEventListener) -> void
  def subscribe: (Projection | LogEventListener) -> void
  def broadcast: (String, _Event) -> void
  attr_reader published_events: Array[_Event] 
  private
  attr_reader projection: Projection
  attr_reader event_listener: LogEventListener
end 

####################
# privateメソッド定義
####################

class LogEventListener
  include _EventSubscriber

  def initialize: (Logger) -> void
  private
  def broadcast: (String, _Event) -> void
  def format_event_message: ((String | nil), ?String) -> String
  def format_cards: (Array[String]) -> String
  def build_info_message: (_Event event) -> String
  def logger: () -> Logger
  def build_warning_message_if_needed: (_Event event) -> String?
end 

module ReadModels
  class PlayerHandState
    private
    attr_reader player_hand_state: Query::PlayerHandState
    def format_hand: () -> String
    def build_exchanged_hand_set: (_Card discarded_card, _Card new_card) -> HandSet
  end

  class Histories
    private
    # privateメソッドはここに定義する
  end
end



