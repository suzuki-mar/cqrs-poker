interface _EventSubscriber
  def handle_event: (_Event event) -> void
end

class Projection
  include _EventSubscriber

  def initialize: () -> void
end

module ReadModels
  class ProjectionVersions
    class VersionInfo
      attr_reader projection_name: String
      attr_reader last_event_id: EventId
      def initialize: (String, EventId) -> void
    end

    def self.load: (GameNumber game_number) -> ReadModels::ProjectionVersions
    def initialize: (Array[VersionInfo]) -> void
    def fetch_all_versions: () -> Array[VersionInfo]
    def self.update_all_versions: (_Event) -> void
    def self.update_by_name: (String, EventId) -> void
  end
  
  interface _HasLastEventId
    def last_event_id: () -> Integer
    def last_event_id=: (Integer) -> Integer
  end

  class PlayerHandState
    include _HasLastEventId
    include _EventSubscriber

    attr_reader player_hand_state: Query::PlayerHandState

    def initialize: () -> void
    def start_new_game!: (GameStartedEvent) -> void
    def exchange_card!: (CardExchangedEvent) -> void
    def end_game!: (GameEndedEvent) -> void
    def current_state_for_display: () -> { status: String, hand: String, current_rank: String, rank_name: String, turn: Integer }
    def hand_set: () -> HandSet
    def refreshed_hand_set: () -> HandSet    
    def current_turn: () -> Integer

    private
    def format_hand: () -> String
    def build_exchanged_hand_set: (_Card discarded_card, _Card new_card) -> HandSet
  end

  class TrashState
    def self.load: (GameNumber game_number) -> ReadModels::TrashState
    def self.new: (Query::TrashState?) -> ReadModels::TrashState
    def has_number?: (_CardForQuery card) -> bool
    def accept!: (_CardForQuery card, Integer current_turn, Integer last_event_id, GameNumber game_number) -> void
    def self.prepare!: (GameNumber game_number, EventId first_event_id) -> void
    def empty?: () -> bool
    def initialize: (untyped) -> void
    attr_reader trash_state: Query::TrashState?
    def self.current_game: (untyped game_number) -> untyped
  end

  class TrashList
    def self.load: () -> ReadModels::TrashList
    def has_rank: (String) -> bool
    def initialize: (Array[Query::TrashState]) -> void
    def accept!: (untyped card, Integer current_turn, Integer last_event_id) -> void
  end

  class Histories
    def self.load: (?limit: Integer) -> Array[Query::History]
    def self.add: (HandSet hand_set, _Event event) -> Query::History
  end
  
end

interface _CardForQuery
  include _Card
end 

class EventPublisher
  def initialize: (projection: Projection, event_listener: LogEventListener) -> void
  def subscribe: (Projection | LogEventListener) -> void
  def broadcast: (String, _Event) -> void
  attr_reader published_events: Array[_Event] 
end




####################
# privateメソッド定義
####################

class LogEventListener
  include _EventSubscriber

  def initialize: (Logger) -> void
end

# privateメソッドだけを定義する
class LogEventListener
  private
  def broadcast: (String, _Event) -> void
  def format_event_message: ((String | nil), ?String) -> String
  def format_cards: (Array[String]) -> String
  def build_info_message: (_Event event) -> String
  def logger: () -> Logger
  def build_warning_message_if_needed: (_Event event) -> String?
end 


class Projection
  private
  def apply_to_player_hand_state: (ReadModels::PlayerHandState player_hand_state, _Event event) -> void
  def accept_to_trash_state_if_exchanged: (_Event event, ReadModels::PlayerHandState player_hand_state) -> void
  def update_trash_state: (_Event event, ReadModels::PlayerHandState player_hand_state) -> void
end

class Histories
  private
  # privateメソッドはここに定義する
end

class EventPublisher
  private
  attr_reader projection: Projection
  attr_reader event_listener: LogEventListener
end

class TrashList
  private
  attr_reader trashes: Array[Query::TrashState]
end

class TrashState
  private
  attr_reader trash_state: Query::TrashState
  def initialize: (Query::TrashState) -> void
  def empty?: () -> bool
end

