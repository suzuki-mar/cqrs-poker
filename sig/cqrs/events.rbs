interface _Event
  def event_type: () -> String
  def event_id: () -> EventId
  def to_event_data: () -> Hash[Symbol, untyped] # event_id: EventId を必ず含むこと
  def to_serialized_hash: () -> Hash[Symbol, untyped]
  def class: () -> Class
  def is_a?: (Class) -> bool
  def nil?: () -> bool
  def assign_ids: (event_id: EventId, game_number: GameNumber) -> void
  def game_number: () -> GameNumber
end

interface _EventClass
  def from_store: (Event) -> _Event
  def event_type: () -> String
  def from_event_data: (Hash[Symbol, untyped], EventId, GameNumber) -> _Event
  def from_event: (Event) -> _Event
end

class GameStartedEvent
  include _Event
  extend _EventClass

  def initialize: (HandSet initial_hand) -> void

  private
  attr_reader initial_hand: HandSet
end

class CardExchangedEvent
  include _Event
  extend _EventClass

  def initialize: (_CardForCommand discarded_card, _CardForCommand new_card) -> void

  private
  attr_reader discarded_card: _CardForCommand
  attr_reader new_card: _CardForCommand
end

class GameEndedEvent
  include _Event
  extend _EventClass

  def initialize: (::ActiveSupport::TimeWithZone ended_at) -> void
  def self.new: (::ActiveSupport::TimeWithZone) -> GameEndedEvent

  private

  attr_reader ended_at: ::ActiveSupport::TimeWithZone
end

class EventBus
  def initialize: (EventPublisher) -> void
  def publish: (_Event) -> void
end 



module AssignableIds
  def assign_ids: (event_id: EventId, game_number: GameNumber) -> void
  def event_id: () -> EventId
  def game_number: () -> GameNumber
end
