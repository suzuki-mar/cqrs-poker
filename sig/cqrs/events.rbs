interface _Event
  def event_type: () -> String
  def to_event_data: () -> Hash[Symbol, untyped]
  def to_serialized_hash: () -> Hash[Symbol, untyped]
  def class: () -> Class
  def is_a?: (Class) -> bool
  def nil?: () -> bool
end

interface _EventClass
  def from_store: (Event) -> _Event
  def event_type: () -> String
end

module SuccessEvents
  class GameStarted
    include _Event
    extend _EventClass
    def initialize: (HandSet) -> void    
  end

  class GameEnded
    include _Event
    extend _EventClass
    def initialize: () -> void
  end

  class CardExchanged
    include _Event
    extend _EventClass
    def initialize: (_CardForCommand, _CardForCommand) -> void    
  end
end

module FailureEvents
  class VersionConflict
    include _Event
    extend _EventClass
    def initialize: (Integer, Integer) -> void    
  end

  class InvalidCommand
    include _Event
    extend _EventClass
    def initialize: (command: Command, reason: String) -> void    
  end
end

class EventBus
  def initialize: (EventPublisher) -> void
  def publish: (_Event) -> void
end 


###################
# privateメソッド定義
####################
module SuccessEvents
  class GameStarted
    private
    attr_reader initial_hand: HandSet
  end

  class GameEnded
    private
    # GameEndedのprivateメソッドがあればここに記述
  end

  class CardExchanged
    private
    attr_reader discarded_card: _Card
    attr_reader new_card: _Card
  end
end

module FailureEvents
  class VersionConflict
    private
    attr_reader expected_version: Integer
    attr_reader actual_version: Integer
  end
  
  class InvalidCommand
    private
    attr_reader command: Command
    attr_reader reason: String
  end
end