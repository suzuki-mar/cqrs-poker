interface _Event
  def event_type: () -> String
  def event_id: () -> EventId
  def to_event_data: () -> Hash[Symbol, untyped] # event_id: EventId を必ず含むこと
  def to_serialized_hash: () -> Hash[Symbol, untyped]
  def class: () -> Class
  def is_a?: (Class) -> bool
  def nil?: () -> bool
  def assign_ids: (event_id: EventId, game_number: GameNumber) -> void
  def game_number: () -> GameNumber
end

interface _EventClass
  def from_store: (Event) -> _Event
  def event_type: () -> String
  def from_event_data: (Hash[Symbol, untyped], EventId, GameNumber) -> _Event
  def from_event: (Event) -> _Event
end

# 注意: _Eventインターフェースに共通のメソッド（event_id, game_number, event_type, 
# to_event_data, to_serialized_hash, assign_ids等）が定義されているため、
# 各イベントクラスではinitializeメソッドと固有のattr_readerのみ定義すること
class GameStartedEvent
  include _Event
  extend _EventClass

  def initialize: (HandSet initial_hand, Array[HandSet::Card] initial_deck_cards) -> void

  private

  attr_reader initial_hand: HandSet
  attr_reader initial_deck_cards: Array[HandSet::Card]
end

class CardExchangedEvent
  include _Event
  extend _EventClass

  def initialize: (HandSet::Card discarded_card, HandSet::Card new_card) -> void

  private

  attr_reader discarded_card: HandSet::Card
  attr_reader new_card: HandSet::Card
end

class GameEndedEvent
  include _Event
  extend _EventClass

  def initialize: (::ActiveSupport::TimeWithZone ended_at) -> void

  private

  attr_reader ended_at: ::ActiveSupport::TimeWithZone
end

class EventBus
  def initialize: (Array[EventPublisher]) -> void
  def publish: (_Event) -> void

  private
  attr_reader publishers: Array[EventPublisher]
end

module EventFinalizer

  def self.execute:(_Event, Event) -> _Event
end


module AssignableIds
  def assign_ids: (event_id: EventId, game_number: GameNumber) -> void
  def event_id: () -> EventId
  def game_number: () -> GameNumber
end
