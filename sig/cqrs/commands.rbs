interface _CommandHandler
  def initialize: (EventBus) -> void
  def handle: (Command, CommandContext) -> CommandResult
  def append_to_aggregate_store: (_Event, Command) -> CommandResult
  def event_bus: () -> EventBus
  def aggregate_store: () -> Aggregates::Store
end

module CommandHandlers
  class GameStart
    include _CommandHandler
  end

  class ExchangeCard
    include _CommandHandler
    private
    def rebuild_hand_from_event: (Array[_CardForCommand], _Event) -> Array[_CardForCommand]
    def build_cards_from_exchanged_event: (Array[_CardForCommand], SuccessEvents::CardExchanged) -> Array[_CardForCommand]
  end

  class EndGame
    include _CommandHandler
  end
end

class Command
  def execute_for_game_start: (Aggregates::BoardAggregate) -> HandSet
  def execute_for_exchange_card: (Aggregates::BoardAggregate) -> _CardForCommand
  def execute_for_end_game: (Aggregates::BoardAggregate) -> void
end


class CommandContext
  module Types
    GAME_START: Symbol
    EXCHANGE_CARD: Symbol
    END_GAME: Symbol
  end
  def initialize: (Symbol, ?HandSet::Card) -> void
  attr_reader type: Symbol
  attr_reader discarded_card: HandSet::Card?
  def self.build_for_game_start: () -> CommandContext
  def self.build_for_exchange: (HandSet::Card) -> CommandContext
  def self.build_for_end_game: () -> CommandContext
end

module Aggregates
  class BoardAggregate
    def self.load_from_events: (Array[_Event] events) -> BoardAggregate
    def apply: (_Event event) -> void
    def draw_initial_hand: () -> HandSet
    def draw: () -> _CardForCommand
    def discard_to_trash: (_CardForCommand card) -> void
    def drawable?: () -> bool
    def apply_game_started_event: (SuccessEvents::GameStarted event) -> void
    def apply_card_exchanged_event: (SuccessEvents::CardExchanged event) -> void
    def self.load_for_current_state: () -> BoardAggregate
  end

  class Deck
    def self.build: () -> Deck
    def draw_initial_hand: () -> HandSet
    def draw: () -> _CardForCommand
    def remove: (_CardForCommand card) -> void
    def has?: (_CardForCommand card) -> bool
    attr_reader cards: Array[_CardForCommand]
    def generate_initial_cards: () -> Array[_CardForCommand]
    def remaining_count: () -> Integer
  end

  class Trash
    def accept: (_CardForCommand card) -> void    
  end

  class Store
    def current_version: () -> Integer
    def append: (_Event, Integer) -> CommandResult
    def load_all_events_in_order: () -> Array[_Event]
    def latest_event: () -> _Event?
    def game_in_progress?: () -> bool
    def build_validation_error: (ActiveRecord::RecordInvalid, Command) -> CommandErrors::InvalidCommand
  end
end

interface _CardForCommand
  include _Card
  def suit: () -> String
  def rank: () -> String
  def valid?: () -> bool
  def ==: (_CardForCommand) -> bool
  def eql?: (_CardForCommand) -> bool
  def hash: () -> Integer
end

class CommandBus
  def initialize: (EventBus) -> void
  def execute: (Command, CommandContext) -> (_Event | CommandErrors::VersionConflict | CommandErrors::InvalidCommand)
  private
  attr_reader logger: Logger?
end

###################
# privateメソッド定義
####################
module Aggregates
  class Store
    private
    def build_event_from_store: (Event) -> (_Event | CommandErrors::InvalidCommand | CommandErrors::VersionConflict)
    def build_failer_if_conflict: (_Event, Integer) -> CommandErrors::VersionConflict?
    def add_event_to_store!: (_Event, Integer) -> Event
    def version_conflict_error?: (ActiveRecord::RecordInvalid) -> bool
    def build_version_conflict_event: (_Event, Integer) -> CommandErrors::VersionConflict
  end


  class BoardAggregate
    private
    attr_reader deck: Deck
    attr_reader trash: Trash
    attr_reader game_started: bool
    attr_writer game_started: bool
  end

  class Deck
    private
    
  end

  class Trash
    private
    attr_reader cards: Array[_CardForCommand]
  end
end

module CommandHandlers
  class GameStart    
    private
    # GameStartのprivateメソッドがあればここに記述
  end

  class ExchangeCard    
    private
    # ExchangeCardのprivateメソッドがあればここに記述
  end

  class EndGame    
    private
    # EndGameのprivateメソッドがあればここに記述
  end
end

class CommandResult
  attr_reader event: untyped
  attr_reader error: untyped
  def initialize: (?event: untyped, ?error: untyped) -> void
  def success?: () -> bool
  def failure?: () -> bool
end