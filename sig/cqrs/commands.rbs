interface _Command
  def class: () -> untyped
  def nil?: () -> bool
end

class GameStartCommand
  include _Command
  def initialize: () -> void
end

class ExchangeCardCommand
  include _Command
  attr_reader discarded_card: HandSet::Card
  attr_reader game_number: GameNumber
  def initialize: (HandSet::Card, GameNumber) -> void
end

class EndGameCommand
  include _Command
  attr_reader game_number: GameNumber
  def initialize: (GameNumber) -> void
end

interface _CommandHandler
  def initialize: (EventBus) -> void
  def append_to_aggregate_store: (_Event, _Command) -> CommandResult
  def event_bus: () -> EventBus
  def aggregate_store: () -> Aggregates::Store
end

module CommandErrors
  class VersionConflict
    attr_reader expected_version: Integer
    attr_reader actual_version: Integer
    def initialize: (Integer, Integer) -> void    
  end

  class InvalidCommand
    attr_reader command: _Command
    attr_reader reason: String
    def initialize: (command: _Command, reason: String) -> void    
  end
end

module CommandHandlers
  class GameStart
    include _CommandHandler
    def handle: (GameStartCommand) -> CommandResult

    private
    attr_reader command: _Command
    def append_event_to_store!: (HandSet initial_hand) -> CommandResult
    def build_already_started_error_result: () -> CommandResult?
  end

  class ExchangeCard
    include _CommandHandler
    def handle: (ExchangeCardCommand) -> CommandResult

    private
    def append_event_to_store!: (HandSet::Card, _CardForCommand, GameNumber) -> CommandResult
    def rebuild_hand_from_event: (Array[_CardForCommand], _Event) -> Array[_CardForCommand]
    def build_cards_from_exchanged_event: (Array[_CardForCommand], CardExchangedEvent) -> Array[_CardForCommand]
    def build_board_error_result_if_needed: (Array[_CardForCommand]) -> CommandResult?
    def build_game_state_error_result_if_needed: () -> CommandResult?
    def build_error_if_needed: (HandSet::Card, GameNumber, Aggregates::BoardAggregate) -> CommandResult?
    def build_error_message_of_game_status_if_needed: (GameNumber) -> String?
    def build_error_message_of_hand_state_in_hand_if_needed: (HandSet::Card, Aggregates::BoardAggregate, GameNumber) -> String?
    def raise_if_invalid_context: () -> void
    attr_reader params: untyped

    class Params
      attr_reader command: _Command
      attr_reader discarded_card: HandSet::Card
      attr_reader board: Aggregates::BoardAggregate
      def initialize: (_Command, Aggregates::BoardAggregate) -> void
    end
  end

  class EndGame
    include _CommandHandler
    def handle: (EndGameCommand) -> CommandResult

    private
    def validate_game_state: (_Command) -> CommandResult?
    def process_end_game: (_Command) -> CommandResult
    def append_event_to_store!: (_Command, GameNumber) -> CommandResult
    def build_error_result_if_needed: (_Command, GameNumber) -> CommandResult?
  end
end
  

module Aggregates
  class Store
    def current_version: () -> Integer
    def append_event: (_Event, GameNumber) -> CommandResult
    def load_all_events_in_order: () -> Array[_Event]
    def latest_event: () -> _Event?
    def game_in_progress?: () -> bool
    def build_validation_error: (ActiveRecord::RecordInvalid, _Command) -> CommandErrors::InvalidCommand
    def valid_event_type?: (_Event | CommandErrors::InvalidCommand | CommandErrors::VersionConflict) -> bool
    def append_initial_event: (_Event, GameNumber) -> CommandResult
    def create_event_record!: (_Event, GameNumber) -> Event

    private
    def build_event_from_event: (Event event_record) -> _Event
    def build_failer_if_conflict: (_Event, GameNumber) -> CommandErrors::VersionConflict?
    def add_event_to_store_may_raise_version_conflict!: (_Event, GameNumber) -> Event
    def version_conflict_error?: (ActiveRecord::RecordInvalid) -> bool
    def build_version_conflict_event: (_Event, Integer) -> CommandErrors::VersionConflict
    def create_event!: (_Event, GameNumber) -> _Event
    def raise_if_invalid_event_record: (Event event_record, Hash[String, untyped] maps) -> void
    def persist_and_finalize_event: (_Event, GameNumber) -> CommandResult

    class EventBuilder
      MAPPINGS: Hash[String, untyped]
      def self.execute: (Event event_record) -> _Event
      def self.build_event_from_record: (Event event_record) -> _Event

      private
      def self.raise_if_invalid_event_record: (Event event_record, Hash[String, untyped] maps) -> void
      def self.build_event: (Event event_record, Hash[String, untyped] maps) -> _Event
      def self.valid_event_type?: (_Event event) -> bool
    end
  end

  class BoardAggregate
    def self.load_from_events: (Array[_Event] events) -> BoardAggregate
    def apply: (_Event event) -> void
    def draw_initial_hand: () -> HandSet
    def draw: () -> _CardForCommand
    def discard_to_trash: (_CardForCommand card) -> void
    def drawable?: () -> bool
    def finish_game: () -> nil
    def self.load_for_current_state: () -> BoardAggregate
    def build_cards_from_exchanged_event: (Array[_CardForCommand], CardExchangedEvent) -> Array[_CardForCommand]

    private
    attr_reader deck: Deck
    attr_reader trash: Trash
    attr_reader game_started: bool
    attr_writer game_started: bool
    def build_cards_from_event: (GameStartedEvent) -> Array[_CardForCommand]
    def apply_game_started_event_from_cards: (Array[_CardForCommand]) -> void
    def apply_game_started_event: (_Event event) -> void
    def apply_card_exchanged_event: (_Event event) -> void
    def apply_game_ended_event: (_Event event) -> void
  end

  class Deck
    def self.build: () -> Deck
    def draw_initial_hand: () -> HandSet
    def draw: () -> _CardForCommand
    def remove: (_CardForCommand card) -> void
    def has?: (_CardForCommand card) -> bool
    attr_reader cards: Array[_CardForCommand]
    def generate_initial_cards: () -> Array[_CardForCommand]
    def remaining_count: () -> Integer
  end

  class Trash
    def accept: (_CardForCommand card) -> void
    attr_reader cards: Array[_CardForCommand]
  end
end

interface _CardForCommand
  include _Card
  def suit: () -> String
  def rank: () -> String
  def valid?: () -> bool
  def ==: (_CardForCommand) -> bool
  def eql?: (_CardForCommand) -> bool
  def hash: () -> Integer
end

class CommandResult
  attr_reader event: untyped
  attr_reader error: untyped
  def initialize: (?event: untyped, ?error: untyped) -> void
  def success?: () -> bool
  def failure?: () -> bool
  def self.invalid_command: (_Command, String) -> CommandResult
end

class CommandBus
  def initialize: (EventBus, Logger) -> void
  def execute: (_Command) -> CommandResult
  private
  def build_handler_map: () -> Hash[untyped, untyped]
  def log_error_if_needed: (untyped) -> void
  attr_reader event_bus: EventBus
  attr_reader logger: Logger
end

