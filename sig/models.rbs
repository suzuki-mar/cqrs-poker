class ApplicationRecord < ActiveRecord::Base
  include _ActiveRecord
  extend _ActiveRecordClass
end

module Query
  class PlayerHandState < ApplicationRecord
    MAX_HAND_SIZE: Integer
    attr_accessor status: String
    attr_accessor current_rank: String
    attr_accessor current_turn: Integer
    attr_accessor hand_set: Array[String]
    def assign_hand_number_from_set: (Array[String]) -> void
    def self.find_current_session: () -> PlayerHandState?
  end

  class History < ApplicationRecord
    attr_accessor hand_set: Array[String]
    attr_accessor rank: Integer
    attr_accessor ended_at: Time
  end
end

class Event < ApplicationRecord
  attr_reader event_type: String
  attr_reader event_data: String
  attr_reader occurred_at: Time
  attr_reader version: Integer
end

class GameSetting
  MAX_HAND_SIZE: Integer
end

# HandSet本体
class HandSet
  MAX_HAND_SIZE: Integer
  attr_reader cards: Array[HandSet::Card]
  def self.build: (Array[HandSet::Card | _CardForQuery | _CardForCommand]) -> HandSet
  def self.valid_cards?: (Array[HandSet::Card]) -> bool
  def initialize: (Array[HandSet::Card]) -> void
  def rebuild_after_exchange: (_CardForCommand, _CardForCommand) -> HandSet
  def evaluate: () -> String
  def rank_name: () -> String
  def valid?: () -> bool
  def fetch_by_number: (Integer) -> HandSet::Card
  def include?: (HandSet::Card) -> bool  
  def self.build_card_from_string: (String) -> HandSet::Card
  def self.card?: (HandSet::Card | String | _CardForCommand | _CardForQuery) -> bool
  def self.rank_japanese_name: (String) -> String
  def self.build_card_for_command: (String) -> _CardForCommand
  def self.build_card_for_query: (String) -> _CardForQuery
  def apply_event_to_replay_hand: (Array[_CardForCommand] cards, _Event event) -> Array[_CardForCommand]
  def build_invalid_command_event_if_unexchangeable: (Array[_CardForCommand] cards) -> FailureEvents::InvalidCommand

  module Rank
    # 重複定義はしていないがLinterが誤検知をしている
    HIGH_CARD: String
    ONE_PAIR: String
    TWO_PAIR: String
    THREE_OF_A_KIND: String
    STRAIGHT: String
    FLUSH: String
    FULL_HOUSE: String
    FOUR_OF_A_KIND: String
    STRAIGHT_FLUSH: String
    ROYAL_FLUSH: String
    ALL: Array[String]
    NAMES: Hash[String, String]
    def self.japanese_name: (String) -> String
  end
end

class HandSet::Card
  include _CardForCommand
  include _CardForQuery
  VALID_SUITS: ::Array[String]
  VALID_RANKS: ::Array[String]

  def self.generate_available: (?Array[HandSet::Card]) -> Array[HandSet::Card]
  def initialize: (String) -> void
end

class HandSet::Evaluate
  def self.call: (Array[HandSet::Card] cards) -> String
  def call: (Array[HandSet::Card] cards) -> String
  
  
end

####################
# privateメソッド定義
####################

class HandSet
  private
  # HandSetのprivateメソッドがあればここに記述
end

class HandSet::Card
  private
  # HandSet::Cardのprivateメソッドがあればここに記述
end

class HandSet::Evaluate
  private  
  def build_rank_checks_map: () -> Hash[String, ::Proc]
  def valid_hand?: (Array[HandSet::Card] cards) -> bool
  def straight_flush?: () -> bool
  def four_of_a_kind?: () -> bool
  def full_house?: () -> bool
  def flush?: () -> bool
  def straight?: () -> bool
  def three_of_a_kind?: () -> bool
  def two_pair?: () -> bool
  def one_pair?: () -> bool
  def royal_flush?: () -> bool
               
  def rank_combinations: () -> HandSet::Evaluate::RankCombinations
  def rank_counts: () -> Hash[String, Integer]
  def suits: () -> Array[String]
  def ranks: () -> Array[String]

  # RankCombinationsはEvaluate内部でしか使わない
  class RankCombinations
    def initialize: (Array[Integer] values) -> void
    def pair_count: () -> Integer
    def three_of_a_kind?: () -> bool
    def four_of_a_kind?: () -> bool
    def full_house?: () -> bool
  end
end 