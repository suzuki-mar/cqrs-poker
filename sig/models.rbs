class ApplicationRecord < ActiveRecord::Base
  include _ActiveRecord
  extend _ActiveRecordClass
end

interface _HasLastEventId
  def last_event_id: () -> Integer
  def last_event_id=: (Integer) -> Integer
  def to_event_id: () -> EventId
end

interface _HasGameNumber
  def game_number: () -> Integer
  def game_number=: (Integer) -> Integer
end

module Query
  class PlayerHandState < ApplicationRecord
    include _HasLastEventId
    MAX_HAND_SIZE: Integer
    attr_accessor status: String
    attr_accessor current_rank: String
    attr_accessor current_turn: Integer
    attr_accessor hand_set: Array[String]
    attr_reader game_number: Integer
    def started?: () -> bool
    def self.find_current_session: () -> PlayerHandState?
    def self.find_latest_by_event: () -> PlayerHandState?

    private

    def validate_hand_set_format: -> void
  end

  class History < ApplicationRecord
    include _HasLastEventId
    attr_accessor hand_set: Array[String]
    attr_accessor rank: Integer
    attr_accessor ended_at: ActiveSupport::TimeWithZone

    private

    def ended_at_cannot_be_in_the_future: -> void
  end

  class TrashState < ApplicationRecord
    include _HasLastEventId
    include _HasGameNumber
    attr_accessor discarded_cards: Array[String]
    attr_accessor current_turn: Integer
    def self.current_game: (GameNumber) -> TrashState?

    private

    def validate_discarded_cards_format: -> void
  end

  class ProjectionVersion < ApplicationRecord
    extend _ActiveRecordClass
    attr_accessor event_id: Integer
    attr_accessor projection_name: String
    def self.projection_names: () -> Hash[String, String]
    def self.find_or_build_all_by_game_number: (
      GameNumber
    ) -> Array[ProjectionVersion]
    # nilの場合は空配列を返すことを明示
    def self.projection_name_and_event_id_pairs: (
      GameNumber?
    ) -> Array[[String, EventId]]
    # nilの場合は空配列を返すことを明示
    def self.find_all_excluding_projection_name: (
      GameNumber?,
      String
    ) -> Array[ProjectionVersion]
  end
end

class Event < ApplicationRecord
  EVENT_TYPES: Array[String]
  attr_reader event_type: String
  attr_reader event_data: String
  attr_reader occurred_at: ActiveSupport::TimeWithZone
  attr_reader version: Integer
  attr_reader game_number: Integer
  def to_event_id: () -> EventId
  def self.current_version_for_game: (GameNumber?) -> Integer
  def self.exists_by_types: (
    GameNumber?,
    Array[String]
  ) -> Hash[String | Symbol, bool]
  def self.version_conflict_error?: (ActiveRecord::RecordInvalid) -> bool

  private
  def validate_event_data_json: () -> void
  def valid_json?: (String?) -> bool
  def validate_occurred_at_not_future_date: () -> void
end

class EventId
  include Comparable
  
  attr_reader value: Integer
  def initialize: (Integer) -> void
  def <=>: (EventId other) -> (Integer | nil)
  def ==: (untyped other) -> bool
  def to_s: () -> String
end




class GameId
  attr_reader value: Integer
  def initialize: (Integer) -> void
end

class GameNumber
  include Comparable
  
  attr_reader value: Integer
  def initialize: (Integer) -> void
  def <=>: (GameNumber other) -> Integer?
  def ==: (untyped other) -> bool
  def to_s: () -> String
  def self.build: () -> GameNumber
end