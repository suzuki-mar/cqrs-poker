module HandlerStrategy
  interface _HandlerStrategy
    def initialize: (Command command, CommandContext context, Aggregates::BoardAggregate board, AggregateStore aggregate_store) -> void
    def board: () -> Aggregates::BoardAggregate
    def command: () -> Command
    def context: () -> CommandContext
    def aggregate_store: () -> AggregateStore
    def build_event_by_executing: () -> _Event
  end

  class GameStart
    include HandlerStrategy::_HandlerStrategy
    def build_invalid_command_event_if_needed: () -> (VersionConflictEvent | InvalidCommandEvent | nil)
  end
  class ExchangeCard
    include HandlerStrategy::_HandlerStrategy
    def build_invalid_command_event_if_needed: () -> (VersionConflictEvent | InvalidCommandEvent | nil)
    private
    def apply_event_to_replay_hand: (Array[Card], _Event event) -> Array[Card]
    def build_invalid_command_event_if_unexchangeable: (Array[Card]) -> InvalidCommandEvent?
  end
  class EndGame
    include HandlerStrategy::_HandlerStrategy
  end
end 