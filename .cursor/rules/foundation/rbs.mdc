---
description: RBSについて言及しているとき
globs: 
alwaysApply: false
---
# RBSについて
## 型定義優先読解ルール
コードの理解・修正・補完においては、RBS（型定義ファイル）を最初に参照する。

RBSが定義されている場合は、実装コードよりも優先して読み取る指針とする。

型定義から読み取れる情報（引数・戻り値・例外・関連構造）は、推論の出発点とする。

## 実装変更時の型定義メンテナンス
実装を変更した際は、必ず対応するRBS（型定義ファイル）を更新すること。

作業を中断する前には、RBSが現時点の実装内容を正しく反映しているかどうかを確認・修正する責任を持つ。

型定義は十分な理由がない限りuntypedは書かないで、Steepの型チェックがエラーなく通る状態にしておくことを原則とする。

##  RBSファイルのpublic/private構成ルール
各クラス・モジュールの型定義は、publicメソッド定義部とprivateメソッド定義部を明確に分離して記述する。
publicメソッドはクラス定義の上部にまとめる。
privateメソッドは「# privateメソッドだけを定義する」以降、クラス末尾にまとめて記述する。
これにより、外部インターフェースと内部実装の責務が明確になり、保守性・可読性が向上する。
RBSの型チェック（Steep）もこの構成で問題なく動作することを確認済み。
例（記述例）
```
class Foo
  def foo_public: () -> void
end

class Bar
  def bar_public: (Integer) -> String
end

class Baz
  def baz_public: (String) -> Integer
end

# privateメソッドだけを定義する　ここの記述はprivateメソッドだけを定義しているブロック内で記述してください

そのブロック内はいかの記述をしています
###################
# privateメソッド定義
####################

class Foo
  private
  def foo_private: () -> void
end

class Bar
  private
  def bar_private: (String) -> void
end

class Baz
  private
  def baz_private: () -> bool
end
```

## sig/active_record.rbs について

このファイルは、RailsのActiveRecord基盤の型定義（interface）を集約したものです。

- ActiveRecordは動的にメソッドや属性が追加されるため、厳密な型付けが困難な箇所が多い
- 代表的なメソッド（where, order, find など）は返り値が多様で、型を特定しづらい
- 柔軟性・拡張性を損なわないため、untypedを多用している

**目的：**
- ドメインモデルやアプリ固有の型定義（models.rbs等）と分離し、責務を明確にする
- ActiveRecord基盤の型定義を一元管理し、他のプロジェクトやレイヤーでも再利用しやすくする

この方針により、型定義の可読性・保守性・拡張性が向上します。


# RBS運用全体方針（補足）

このプロジェクトでは、RBS（型定義ファイル）を「設計書」として最大限に活用し、  
実装コードと設計の同期・責務分離・可読性向上を徹底しています。

- **型定義優先読解**  
  コードの理解・修正・補完はRBSを最初に参照し、設計意図やインターフェースを明確に把握できるようにしています。

- **public/private分離ルール**  
  各クラス・モジュールのpublicメソッドとprivateメソッドを明確に分離し、  
  外部インターフェースと内部実装の責務を可視化しています。

- **レイヤーごとの型定義ファイル分割**  
  ドメインモデル、ActiveRecord基盤、CQRSコマンド/クエリなど、  
  責務ごとにRBSファイルを分割し、設計の全体像が一目で分かる構成にしています。

- **untypedの利用方針**  
  Rails/ActiveRecordのような動的な基盤部分は、柔軟性・拡張性を損なわないためにuntypedを許容しています。  
  ただし、アプリ固有のドメイン層では型安全性を重視します。

- **Steepによる型チェック**  
  RBSと実装コードの同期をSteepで自動的に担保し、設計と実装のズレを即座に検出できる体制を整えています。

---

この方針により、  
- 設計の透明性・保守性・拡張性  
- 新規参加者の学習コスト低減  
- チーム全体での設計意図の共有

が実現できると考えています。