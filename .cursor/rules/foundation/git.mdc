---
description: Gitの操作やGitについて話しているとき
globs: 
alwaysApply: false
---
### **Git Rules（Git運用ルール）**

#### **1. コミットの基本方針**
コミットは必ず日本語にしてください

##### **1.0 コミットコマンドの形式**
コミットは以下の形式で実行します：

```bash
git commit {コミットするファイル} -m "{コミットする内容}"
```

例：
```bash
git commit .cursor/ -m ".cursorディレクトリの構成を整理"
```

##### **1.1 作業単位でコミットする**
- **コミット単位は作業単位とし、関連する全ての変更をまとめる**
- **理由**：
  - 変更の意図が明確になり、履歴を読みやすくできる
  - レビュー時に、関連する変更だけを確認できる
  - 問題が発生した際に特定の変更だけを取り消しやすい

✅ 良い例：
```sh
# 同一の作業は複数のディレクトリの変更をまとめてコミット
git commit app/events/ spec/events/ -m "イベントの実装"

# 単一の目的に対する変更
git commit app/models/card.rb spec/models/card_spec.rb -m "カードクラスを追加"
```

❌ 悪い例：
```sh
# 同一の作業を分割してコミット
git commit app/events/ -m "イベントリスナーの実装"
git commit spec/events/ -m "イベントリスナーのテストの実装"

# 複数の目的を混ぜたコミット
git commit -m "Cardを追加、テスト戦略も更新"
```

##### **1.2 コミットするファイルを明示的に指定する**
- **git add . や git add -A は使用せず、コミットしたいファイルやディレクトリを明示的に指定する**
- **理由**：
  - 意図しないファイルの変更が混入するのを防ぐ
  - コミットの意図が明確になる
  - 変更の範囲が明確になる

✅ 良い例：
```sh
git commit .cursor/ -m "設定ファイルを整理"
git commit app/models/card.rb -m "カードクラスを実装"
git commit spec/models/ app/models/card.rb -m "カードの検証ロジックを追加"
```

❌ 悪い例：
```sh
git add .
git commit -m "カードクラスを実装"
```

##### **1.3 コミットメッセージの簡潔さ**
- **短く、明確に、変更の本質を伝える**
- **理由**：
  - 長すぎるメッセージは履歴を追いにくくする
    - ただし、メッセージで何をしたのかをわかるように　目次のように書くこと
    - Good ```git commit .gitignore -m "個人の作業ログを含むdaily_logsディレクトリをGit管理対象外に設定"```
    - Bad  ```git commit .gitignore -m "daily_logsディレクトリをGit管理対象外に設定"```
  - 変更の詳細はコードとコメントで補足するべき
  - `git log --oneline` で履歴を見たときに分かりやすくなる

✅ 良い例：
```sh
git commit -m "GameStateのバリデーションを実装"
```
❌ 悪い例：
```sh
git commit -m "GameStateの手札バリデーションをHandValidatorに移行し、リファクタリングとテストの修正も含む"
```

##### **1.4 コミットメッセージには変更理由を含める**
- **何をしたかだけでなく、なぜその変更が必要だったのかを含める**
- **理由**：
  - 変更の意図が後から見ても分かるようにする
  - レビュアーが変更の背景を理解しやすくなる

✅ 良い例：
```sh
git commit .gitignore -m "個人の作業ログを含むdaily_logsディレクトリをGit管理対象外に設定"
git commit app/models/card.rb -m "カードの重複を防ぐためにユニーク制約を追加"
```

❌ 悪い例：
```sh
git commit .gitignore -m "daily_logsディレクトリを除外"
git commit app/models/card.rb -m "ユニーク制約を追加"
```

##### **1.5 コミットメッセージには変更理由を含める**
- **コミットメッセージには詳細な説明を含めず、コードとコメントで補足**
- **理由**：
  - `git blame` や `git show` で履歴をたどったときに、コードとセットで理解しやすい
  - 変更内容が履歴に埋もれず、コードベースで維持される

✅ 良い例（コードにコメントを書く）：
```ruby
# GameStateからバリデーション処理を分離
class HandValidator
  def validate(hand)
    # ここで手札のルールチェックを行う
  end
end
```
❌ 悪い例（コミットメッセージに詳細を書いてしまう）：
```sh
git commit -m "GameStateの手札バリデーションをHandValidatorに移行し、ルールチェックを追加"
```

##### **1.6 コミットメッセージにプレフィックスを付けない**
- **feat:, fix:, chore: などのプレフィックスは使用しない**
- **理由**：
  - シンプルに変更内容を伝える
  - 日本語で簡潔に書く

✅ 良い例：
```sh
git commit app/models/card.rb -m "カードの役判定を実装"
git commit spec/models/ -m "テストケースを追加"
```

---

### **2. コミットメッセージの書き方**
- **日本語で記載する**
- **動詞で始める（「〜を作成」「〜を実装」「〜を修正」など）**


✅ **良いコミットの例**
```sh
git commit -m "Rakeタスクのテストを追加"
git commit -m "CLIの出力バグを修正"
git commit -m "StartGameUseCaseを整理"
```