---
description: 
globs: 
alwaysApply: false
---
### Git Rules（Git運用ルール）

---

## 1. コミットの基本方針

### 1.0 コミットコマンドの形式
```bash
git commit {コミットするファイル} -m "{コミットする内容}"
```
**例：**
```bash
git commit .cursor/ -m ".cursorディレクトリの構成を整理"
```

---

### 1.1 作業単位でコミットする
- コミット単位 = 作業単位（関連変更はまとめる）
- **良い例：**
```bash
git commit app/events/ spec/events/ -m "イベントの実装"
git commit app/models/card.rb spec/models/card_spec.rb -m "カードクラスを追加"
```
- **悪い例：**
```bash
git commit app/events/ -m "イベントリスナーの実装"
git commit spec/events/ -m "イベントリスナーのテストの実装"
git commit -m "Cardを追加、テスト戦略も更新"
```

---

### 1.2 明示的にファイルを指定する
- `git add .` や `-A` は使わない
- **良い例：**
```bash
git commit .cursor/ -m "設定ファイルを整理"
git commit app/models/card.rb -m "カードクラスを実装"
git commit spec/models/ app/models/card.rb -m "カードの検証ロジックを追加"
```
- **悪い例：**
```bash
git add .
git commit -m "カードクラスを実装"
```

---

### 1.3 メッセージは簡潔に・明確に
- 内容を要約したタイトル的メッセージに
- **良い例：**
```bash
git commit -m "GameStateのバリデーションを実装"
```
- **悪い例：**
```bash
git commit -m "GameStateの手札バリデーションをHandValidatorに移行し、リファクタリングとテストの修正も含む"
```

---

### 1.4 変更理由を含める
- **良い例：**
```bash
git commit .gitignore -m "個人の作業ログを含むdaily_logsディレクトリをGit管理対象外に設定"
git commit app/models/card.rb -m "カードの重複を防ぐためにユニーク制約を追加"
```
- **悪い例：**
```bash
git commit .gitignore -m "daily_logsディレクトリを除外"
git commit app/models/card.rb -m "ユニーク制約を追加"
```

---

### 1.5 詳細な説明はコードコメントで補足
- **良い：コードにコメントを書く**
```ruby
# GameStateからバリデーション処理を分離
class HandValidator
  def validate(hand)
    # ここで手札のルールチェックを行う
  end
end
```
- **悪い：コミットメッセージに詳細を書く**
```bash
git commit -m "GameStateの手札バリデーションをHandValidatorに移行し、ルールチェックを追加"
```

---

### 1.6 プレフィックス（feat: など）は使わない
- 日本語でシンプルに
- **良い例：**
```bash
git commit app/models/card.rb -m "カードの役判定を実装"
git commit spec/models/ -m "テストケースを追加"
```

---

### 1.7 Cursorのルールファイルの管理
- メッセージは統一：「cursorのルールファイルを更新」
- コードと混ぜず、1コミットにまとめる
- **良い例：**
```bash
git commit .cursor/rules/ -m "cursorのルールファイルを更新"
git commit app/models/ spec/models/ -m "ゲーム開始機能を実装"
```
- **悪い例：**
```bash
git commit . -m "ゲーム開始機能の実装とCursorルールの更新"
git commit .cursor/rules/foundation/ -m "foundationのルールを更新"
git commit .cursor/rules/ -m "AIアシスタントの応答ルールを詳細化し、テストガイドラインを追加"
```

---

### 1.8 `git commit -am` は使わない
- 新規ファイルを見落とすリスクがあるため明示的にファイルを指定する

---

## 2. コミットメッセージの書き方

- 日本語で記載する
- 動詞で始める（「〜を作成」「〜を実装」「〜を修正」など）

**良い例：**
```bash
git commit -m "Rakeタスクのテストを追加"
git commit -m "CLIの出力バグを修正"
git commit -m "StartGameUseCaseを整理"
```

---

