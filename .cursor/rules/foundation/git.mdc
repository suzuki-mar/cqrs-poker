---
description: Gitの操作やGitについて話しているとき
globs: 
alwaysApply: false
---
### **Git Rules（Git運用ルール）**

#### **1. コミットの基本方針**
コミットは必ず日本語にしてください

##### **1.1 単一の目的**
- **1つのコミットには1つの目的のみを含める**
- **理由**：
  - 変更の意図が明確になり、履歴を読みやすくできる
  - レビュー時に、関連する変更だけを確認できる
  - 問題が発生した際に特定の変更だけを取り消しやすい

✅ 良い例：
```sh
git commit -m "Cardクラスを追加"
git commit -m "テスト戦略にFakerの設計方針を追加"
```
❌ 悪い例：
```sh
git commit -m "Cardを追加、テスト戦略も更新"
```

##### **1.2 コミットメッセージの簡潔さ**
- **短く、明確に、変更の本質を伝える**
- **理由**：
  - 長すぎるメッセージは履歴を追いにくくする
    - ただし、メッセージで何をしたのかをわかるように　目次のように書くこと
    - Good  ```git commit .gitignore -m "個人の作業ログを含むdaily_logsディレクトリをGit管理対象外に設定"```
    - Bad ```git commit .gitignore -m "daily_logsディレクトリをGit管理対象外に設定"```    
  - 変更の詳細はコードとコメントで補足するべき
  - `git log --oneline` で履歴を見たときに分かりやすくなる

✅ 良い例：
```sh
git commit -m "GameStateのバリデーションを実装"
```
❌ 悪い例：
```sh
git commit -m "GameStateの手札バリデーションをHandValidatorに移行し、リファクタリングとテストの修正も含む"
```

##### **1.3 実装の詳細はコード内に書く**
- **コミットメッセージには詳細な説明を含めず、コードとコメントで補足**
- **理由**：
  - `git blame` や `git show` で履歴をたどったときに、コードとセットで理解しやすい
  - 変更内容が履歴に埋もれず、コードベースで維持される

✅ 良い例（コードにコメントを書く）：
```ruby
# GameStateからバリデーション処理を分離
class HandValidator
  def validate(hand)
    # ここで手札のルールチェックを行う
  end
end
```
❌ 悪い例（コミットメッセージに詳細を書いてしまう）：
```sh
git commit -m "GameStateの手札バリデーションをHandValidatorに移行し、ルールチェックを追加"
```
#### 1.4 コミットコマンドを実行するときはファイルを直接指定する
- git add . や git add -A は使用せず、コミットしたいファイルを明示的に指定する
- 理由：
  - 意図しないファイルの変更が混入するのを防ぐ
  - コミットの意図が明確になる
  - 変更の範囲が明確になる
```
✅ 良い例：
```
git commit .cursor/ -m "設定ファイルを整理"
git commit app/models/card.rb -m "カードクラスを実装"
git commit spec/models/card_spec.rb app/models/card.rb -m "カードの検証ロジックを追加"
```

"
❌ 悪い例：
```
git add .
git commit -m "カードクラスを実装"
```

##### **1.5 コミットメッセージにプレフィックスを付けない**
- **feat:, fix:, chore: などのプレフィックスは使用しない**
- **理由**：
  - シンプルに変更内容を伝える
  - 日本語で簡潔に書く

✅ 良い例：
```sh
git commit app/models/card.rb -m "カードの役判定を実装"
git commit spec/models/ -m "テストケースを追加"
```

❌ 悪い例：
```sh
git commit -m "feat: カードの役判定を実装"
git commit -m "test: テストケースを追加"
```

---

### **2. コミットメッセージの書き方**
- **日本語で記載する**
- **動詞で始める（「〜を作成」「〜を実装」「〜を修正」など）**


✅ **良いコミットの例**
```sh
git commit -m "Rakeタスクのテストを追加"
git commit -m "CLIの出力バグを修正"
git commit -m "StartGameUseCaseを整理"
```

❌ **避けるべきコミットの例**
```sh
git commit -m "作業途中"
git commit -m "バグ修正"
git commit -m "いろいろ更新"
```

---

### **3. コミットの粒度**
- **一つの論理的な変更ごとにコミットする**
  - 関連する複数のファイルを変更しても、**「1つの意味のある変更」** であればまとめる
  - **「ついでにリファクタ」** は分ける

✅ **良い例（1つの変更ごとにコミット）**
```sh
git commit -m "HandValidatorのnullチェックを修正"
git commit -m "HandValidatorのロジックをリファクタリング"
```

❌ **悪い例（1つのコミットに複数の目的を含める）**
```sh
git commit -m "HandValidatorのバグ修正とリファクタリング"
```

---

### **4. コミットのベストプラクティス**
#### **4.1 コミット前に必ず `git diff` を確認**
- `git diff` で変更内容を確認し、**不要な変更が混ざっていないか** 確認する

#### **4.2 コミット前に `git status` を確認**
- `git status` で意図しないファイルが含まれていないかチェック

#### **4.3 コミットのやり直し**
- **直前のコミットを修正したい場合**
  ```sh
  git commit --amend
  ```
- **直前のコミットを取り消したい場合**
  ```sh
  git reset --soft HEAD^
  ```

#### **4.4 変更を一時保存したい場合**
- **まだコミットしたくないが、変更を保存したい場合**
  ```sh
  git stash
  ```
- **保存した変更を戻す**
  ```sh
  git stash pop
  ```

---

### **5. まとめ**
✅ **良いGit運用のポイント**
- **1つのコミット = 1つの目的**
- **明確で簡潔なコミットメッセージ**
- **詳細な説明はコード内にコメントとして記述**
- **プレフィックスを使って目的を明確にする**
- **不要な変更が混ざらないよう `git diff` を確認**
- **意図しないファイルが混ざらないよう `git status` を確認**