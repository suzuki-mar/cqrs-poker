---
description: 
globs: 
alwaysApply: true
---
# CQRS ポーカー

## 1. このプロジェクトの目的

このプロジェクトの目的は、**完全なポーカーゲームを構築することではありません**。

### このプロジェクトが目指すものは？

**CQRS（Command Query Responsibility Segregation）** の中核的な概念を、簡易的な実装を通じて理解することがゴールです。具体的には以下の内容を含みます：

#### イベントソーシングによる状態管理

- 状態の変更を直接保存するのではなく、イベントを記録し、それをもとに現在の状態を再構築します。

#### コマンドとクエリの責務の分離

- 書き込み（コマンド）と読み込み（クエリ）の責務を明確に分けることで、システムのスケーラビリティを確保します。

### このプロジェクトで最も重要な特徴は？

このプロジェクトは、**CQRS の原則をシンプルかつクリーンに適用すること** に重点を置いています。余計な機能や複雑な業務ロジックは意図的に排除し、以下の点を際立たせます：

#### 最小限のコマンドとイベント

- 状態遷移の基本的な流れを表すため、`StartGame`、`ExchangeCard`、`EndGame` の3つのコマンドだけを使用します。

#### シンプルな読み取りモデルの構築

- `EventStore` から状態を再構築する仕組みを取り入れ、CQRS における読み取りモデルの独立性を示します。

### このプロジェクトは誰の役に立つか？

#### CQRS を個人的に理解したい人

- イベントソーシングと CQRS の基礎を、手を動かしながら学べます。
- イベントの流れや読み取りモデルの再構築を実際のコードで確認できます。

#### 他の人に CQRS を説明したい人

- CQRS 初心者の開発者にもわかりやすい、最小限のサンプルとして活用できます。
- シンプルな設計により、核となる考えに集中できます。
