---
description: 
globs: 
alwaysApply: false
---
# CQRS Poker - ユースケース & テスト戦略

## 1. StartGameCommand（ゲームを開始する）

### **前提条件**
- ゲームが開始されていない
- プレイヤーがCUI上でコマンドを入力できる状態

### **イベントの流れ**
1. プレイヤーがゲームを開始
2. `StartGameCommand` を実行

### **コマンドの処理**
1. `StartGameCommand#execute` が呼ばれる
2. `GameStarted` イベントが生成される

### **イベントの適用**
1. `EventStore` に `GameStarted` イベントが保存される
2. デッキが初期化され、52枚のカードがセットされる
3. `GameState` が新規作成され、プレイヤーの手札が設定される
4. `GameState` の `currentRank` が計算される

### **システムの状態更新**
- `GameState` のデータが保存され、現在のゲーム状況を保持

### **例外ケース**
- ⚠️ **ゲームがすでに開始されている場合**
  - `StartGameCommand` の実行を拒否し、`InvalidCommand` エラーを返す
  - `EventStore` に `GameStarted` イベントが 2回記録されない
  - `GameState` は変更されない

- ⚠️ **デッキが初期化できなかった場合（想定外のエラー）**
  - システムエラーを記録し、ゲームの開始を中断
  - `EventStore` には何も記録しない（不完全なデータを残さない）
  - `GameState` の作成をロールバックする

### **期待される結果**
✅ `EventStore` に `GameStarted` イベントが記録される  
✅ `GameState` が新規作成されていること  
✅ `StartGameCommand` の再実行が禁止される（2回目はエラー）  
✅ 例外が発生した場合は適切に処理され、システムが一貫性を維持する  

---

## 2. ExchangeCardCommand（手札を交換する）

### **前提条件**
- ゲームが開始されている
- プレイヤーがCUI上でコマンドを入力できる状態

### **イベントの流れ**
1. プレイヤーが手札の1枚を交換するコマンドを実行
2. `ExchangeCardCommand` を実行

### **コマンドの処理**
1. `ExchangeCardCommand#execute` が呼ばれる
2. `CardExchanged` イベントが生成される

### **イベントの適用**
1. `EventStore` に `CardExchanged` イベントが記録される
2. 交換したカードが手札からなくなり、新しいカードが手札に加わる
3. `currentRank` が再計算される
4. 捨て札のReadModelが捨てたカードが新規で追加されている

### **期待される結果**
✅ 交換したカードが手札からなくなり、新しいカードが手札に加わっている  

### **例外ケース**
- ⚠️ **プレイヤーの手札にないカードを交換しようとした場合**
  - `InvalidCommand` を返し、処理を中断する

- ⚠️ **デッキにカードがない場合**
  - `InvalidCommand` を返し、処理を中断する

---

## 3. EndGameCommand（ゲームを終了する）

### **前提条件**
- ゲームが開始されている

### **イベントの流れ**
1. プレイヤーがゲームを終了するコマンドを実行
2. `EndGameCommand` を実行

### **コマンドの処理**
1. `EndGameCommand#execute` が呼ばれる
2. `GameEnded` イベントが生成される

### **イベントの適用**
1. `EventStore` に `GameEnded` イベントが記録される
2. `History` クラスが生成され、ゲームの履歴データを保持する
3. `GameState` の状態が「終了済み」に更新される

### **期待される結果**
✅ `EventStore` に `GameEnded` イベントが記録されている  
✅ `History` クラスが生成され、最終手札と `currentRank` を保持している  
✅ `GameState` の状態が「終了済み」になっている  

### **例外ケース**
- ⚠️ **ゲームが開始されていないのに終了しようとした場合**
  - `InvalidCommand` を返し、処理を中断する

---

## **シナリオテスト: フルゲームの流れ**

### **前提条件**
- ゲームが開始されていない
- プレイヤーがCUI上でコマンドを入力できる状態

### **CUI上でのプレイヤーの操作**
1. `ゲームを開始する` を選択
2. `手札の交換` を選択し、交換するカードを指定
3. `ゲームを終了する` を選択

### **期待される結果**
✅ ログに「ゲームが開始された」と記録されている  
✅ ログに「カードが交換された」と記録されている（交換した回数分）  
✅ ログに「ゲームが終了した」と記録されている  
✅ ログに「手札交換の履歴」が正しく記録されている  

### **シナリオの流れ**
1. `ゲームを開始する` を選択 → ログを確認: `✅ ゲームが開始された`
2. `手札の交換` を選択し、交換するカードを指定 → ログを確認: `✅ カードが交換された`
3. `ゲームを終了する` を選択 → ログを確認: `✅ ゲームが終了した` `✅ 手札交換の履歴が記録されている`

### **例外ケース**
- ⚠️ **ゲームが開始されていないのに手札を交換しようとした場合**
  - ログを確認: `⚠️ ゲームが開始されていません`

- ⚠️ **ゲームが開始されていないのに終了しようとした場合**
  - ログを確認: `⚠️ ゲームはまだ開始されていません`

- ⚠️ **手札交換の履歴がログから取得できなかった場合**
  - ログを確認: `⚠️ 手札交換の履歴を取得できませんでした`

