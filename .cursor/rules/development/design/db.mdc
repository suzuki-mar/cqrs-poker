---
description: 
globs: 
alwaysApply: true
---
# データベース設計（最終更新日: 2025/03/02）

## 1. テーブル設計

### **EventStore（イベントソーシング用ストレージ）**

Event Sourcing を実現するために、状態の変化はすべてイベントとして記録されます。

| カラム名     | 型        | 説明                                                                 |
|--------------|-----------|----------------------------------------------------------------------|
| id           | BIGSERIAL | 主キー、自動採番                                                    |
| event_type   | TEXT      | イベントの種類（例: GameStarted, CardExchanged, GameEnded）        |
| event_data   | JSONB     | イベントに関する詳細データ                                          |
| occurred_at  | TIMESTAMP | イベントが発生した日時                                               |

**補足：**
- `event_data` は、イベントタイプごとに異なる柔軟な構造を扱うために JSONB を使用しています。
- `occurred_at` により、イベントの時系列順が保証されます。

---

### **GameState（読み取り用モデル）**

この読み取りモデルは `EventStore` から集計されたデータを元に、最新のゲーム状態を効率的に取得するために設計されています。

| カラム名 | 型  | 説明                                   |
|----------|------|----------------------------------------|
| game_id  | UUID | ゲームを一意に識別するID（主キー）     |
| hand_1   | TEXT | 手札の1枚目                            |
| hand_2   | TEXT | 手札の2枚目                            |
| hand_3   | TEXT | 手札の3枚目                            |
| hand_4   | TEXT | 手札の4枚目                            |
| hand_5   | TEXT | 手札の5枚目                            |
| rank     | TEXT | 現在の手札ランク（例: ONE PAIR, STRAIGHT）|

**補足：**
- `hand_1`〜`hand_5` は固定列とすることで、NULL管理や可変長配列の取り扱いを避けています。
- `rank` は検索のしやすさを優先して文字列として保持します。
- `game_id` により、各ゲーム状態が一意に識別されます。

---

## 2. データ設計の考え方

### **イベントストアと読み取りモデルの分離**
- `EventStore` は **すべての変更履歴を記録** し、過去状態の再現を可能にします。
- `GameState` は **最新状態を素早く取得するための最適化された構造** です。

### **なぜ読み取りモデルは正規化されていないのか**
- ポーカーのルール上、手札は常に **5枚固定** のため、正規化の恩恵は小さいです。
- この設計では、JSONBではなく個別のカラムを使用することで、クエリのシンプルさとパフォーマンスを優先しています。

---

## 3. データ更新の流れ

1️⃣ **コマンドが発行される**  
　例：`ExchangeCard(oldCard: Card, newCard: Card)`

2️⃣ **`EventStore` にイベントが記録される**  
　例：`CardExchanged` イベントが保存される

3️⃣ **読み取りモデル（`GameState`）が更新される**  
　`EventStore` の内容をもとに、`hand_1`〜`hand_5` を適切に更新
