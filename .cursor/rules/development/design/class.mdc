---
description: 
globs: 
alwaysApply: false
---
# 📘 詳細クラス設計 & ディレクトリガイド（最終更新日: 2025/04/16）

## 🌟 プロジェクト概要

本設計は、CQRSの基本概念に加え、イベントソーシング（ES）の思想を取り入れた構成です。
このプロジェクトは、CLIベースのポーカーゲームにおいて、  
**CQRS（Command Query Responsibility Segregation）**をシンプルかつ実践的に違用することを目的としています。

状態変更と状態参照を明確に分離し、以下の3つの層を中心に構成されます：

- **Command層**：入力と状態変更の処理  
- **Query層**：イベントベースの状態取得  
- **DomainShared層**：両者から参照可能な共通ドメインロジック

---

## ✅ Command層（`app/commands`）

### 📌 役割：
ユーザーの入力操作を受け取り、**ゲーム状態を変更する処理**を実行します。  
「ポーカーという行為の“意図”を受け取り、具体的な変化に翻訳する」責任を持ちます。

### 📁 配置するもの：
- コマンドオブジェクト（`GameStartCommand`, `ExchangeCardCommand`）  
- ユースケース実行クラス（`CommandHandler`）  
- Aggregateルート（`Game`）

---

## 🔍 Query層（`app/queries`）

### 📌 役割：
発行されたイベントをもとに、**現在のゲーム状態を再構成して取得**する層です。  
状態の整形・表示に特化した責任分離を担います。

### 📁 配置するもの：
- Projectionクラス（`Projection`）  
  - `EventStore`と接続し、過去イベントをリプレイして状態を再構成します。  
- Read Model（`GameStateReadModel`）  
  - ユーザーに提示するための状態表現

---

## ⚙️ DomainShared層（`app/domain_shared`）

### 📌 役割：
Command・Queryの両方から利用される、**中立的かつ再利用可能なドメインロジック**を集約します。  
ゲームの本質的なルール・カード操作・役評価などを定義します。

### 📁 配置するもの：
- 値オブジェクト：`Card`, `Hand`, `Rank`  
- 共通型/Enum/定数：`Suit`, `RankValue`（必要に応じて）

### ⚠️ 配置ルール：
- ✅ CommandとQueryの両方で使われるクラスのみ配置  
- ❌ 片方だけで使われるものはそれぞれの層に  
- ❌ 状態を保持するエンティティ（`Game`）は含めない

---

## 🧱 クラス定義一覧（DomainShared）

### 🃏 `Card`（値オブジェクト）

```
Card
├── suit: string
├── rank: string
├── equals(other: Card): bool
└── toString(): string
```

### ✋ `Hand`（値オブジェクト）

```
Hand
├── cards: Card[]
├── contains(card: Card): bool
├── exchange(oldCard, newCard): Hand
└── fromPrevious(previous: Hand, newCards: Card[]): Hand
```

### 🎖️ `Rank`（値オブジェクト）

```
Rank
├── name: string
├── determine(hand: Hand): Rank
└── equals(other: Rank): bool
```

> ※ `Rank`は、手牌の組み合わせに基づいて**ゲームの勝敗評価を抽象化**する役割を担います。

---

## 🗃 その他のクラス群（要総）

### `commands/`
- `CommandHandler`：ユースケース実行のルーティング  
- `GameStartCommand`, `ExchangeCardCommand`：操作意図を表現

### `queries/`
- `GameStateReadModel`：表示用の状態構築  
- `Projection`：イベントを適用し、状態を再構成

### `events/`
- `EventBus`, `EventHandler`, `EventType`, `Events`  
- `GameStartedEvent`, `HandCardsExchangedEvent`, `LogEventListener`

### `infrastructure/`
- `EventPublisher`：イベントの保存と通知を担う

### `models/`
- `EventStore`：イベントの永続化とリプレイ  
- `GameState`：Query用の最新状態モデル

---

## 🩹 まとめ（責務マップ）

| ディレクトリ | 主な責務 | 配置するもの |
|-------------|-----------|----------------|
| `commands/` | 状態の変更 | コマンド、ユースケース、Aggregate |
| `queries/` | 状態の読み取り | Projection、ReadModel、クエリロジック |
| `domain_shared/` | 共通ドメイン矩形 | 値オブジェクト、評価・検証ロジック |
| `events/` | イベント管理 | イベントクラス、バス、リスナー等 |
| `infrastructure/` | 外部接続・中継処理 | イベント永続・発行 |
| `models/` | DB永続用モデル | 状態・イベントログ |
| `validators/` | 入力・状態の検証 | 専用バリデーター（`HandValidator`など） |

---

