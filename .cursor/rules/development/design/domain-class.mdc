---
description: Domainクラスについて話しているとき
globs: 
alwaysApply: false
---
# 📘 詳細クラス設計 & ディレクトリガイド（最終更新日: 2025/04/16）

## 🌟 プロジェクト概要
このプロジェクトは、CLIベースのポーカーゲームにおいて、**CQRS※Command Query Responsibility Segregation※**をシンプルかつ実践的に導入することを目的としています。

状態変更と読み取りを明確に分離し、以下の3つの層を中心に構成されます：

- Command層
- Query層
- DomainShared層（共通ドメインロジック）


---

## ✅ Command層（`app/commands`）

### 📌 役割：
ユーザーの入力操作を受け取り、**ゲーム状態を変更する処理**を実行します。

### 📁 配置するもの：
- **コマンドオブジェクト**（例: `GameStartCommand`, `ExchangeCardCommand`）
- **ユースケース実行クラス**（例: `CommandHandler`）
- **状態変更ロジックとの接続**（`Game` エンティティなど）


---

## 🔍 Query層（`app/queries`）

### 📌 役割：
発行されたイベントをもとに、**現在の状態を読み取る処理**を提供します。

### 📁 配置するもの：
- **Projectionクラス**：イベントから状態を再構築（例: `Projection`）
- **Read Model**：状態を表示用に整形（例: `GameStateReadModel`）


---

## ⚙️ DomainShared層（`app/domain_shared`）

### 📌 役割：
Command・Queryのどちらからも利用される、**中立的で再利用可能なドメインロジック**を集積する層です。

### 📁 配置するもの：
- **値オブジェクト**：`Card`, `Hand`, `Rank`
- **共通型/Enum/定数**：`Suit`, `RankValue`（必要に応じて）

### ⚠️ 配置ルール：
- ✅ CommandとQueryの両方で使われるクラスのみ
- ❌ 片方からしか使われないものは、それぞれの層に配置
- ❌ 状態変更を伴うエンティティ（例: `Game`）は配置しない


---

## 🧱 クラス定義一覧（DomainShared）

### 🃏 Card（値オブジェクト）
```plaintext
Card
├── suit: string
├── rank: string
├── equals(other: Card): bool
└── toString(): string
```

### ✋ Hand（値オブジェクト）
```plaintext
Hand
├── cards: Card[]
├── contains(card: Card): bool
├── exchange(oldCard, newCard): Hand
└── fromPrevious(previous: Hand, newCards: Card[]): Hand
```

### 🎖️ Rank（値オブジェクト）
```plaintext
Rank
├── name: string
├── determine(hand: Hand): Rank
└── equals(other: Rank): bool
```


---

## 🗃 その他のクラス群（要約）

### commands/
- `CommandHandler`: ユースケース実行のルーティング
- `GameStartCommand`, `ExchangeCardCommand`: ユーザー操作の意図を表現

### queries/
- `GameStateReadModel`: 表示用の状態構築
- `Projection`: イベント適用による状態更替

### events/
- `EventBus`, `EventHandler`, `EventType`, `Events`
- `GameStartedEvent`, `HandCardsExchangedEvent`, `LogEventListener`

### infrastructure/
- `EventPublisher`: イベントの保存と通知を担当

### models/
- `EventStore`: イベントの永続化とリプレイ
- `GameState`: 最新状態を表現（Query用）


---

## 🧹 まとめ
| 層名 | 主な責務 | 配置するもの |
|------|----------|--------------|
| `commands/` | 状態の変更 | コマンド、ユースケース、Aggregate |
| `queries/` | 状態の読み取り | Projection、ReadModel、クエリロジック |
| `domain_shared/` | 共通ドメイン矩形 | 値オブジェクト、評価・検証ロジック |

この構成により、責務の明確化・依存の整理・変更耐性の向上が実現されます。

