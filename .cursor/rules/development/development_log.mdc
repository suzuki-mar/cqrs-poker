---
description: 作業ログを書いて依頼したとき
globs: 
alwaysApply: false
---
# ✍️ Cursor ログフォーマット

Cursorが日々の開発活動を記録し、振り返りをしやすくするためのログフォーマットです。

## 1️⃣ 作業開始前（プランニングログ）

### 🎯 今日の目標
実装や設計の具体的な目標を記録します。達成したい状態を明確にすることで、作業の方向性を定めます。

### 📋 作業予定
【重要：作業ログの参照ルール】
- 基本は前日の作業ログから転記（例：2025/04/09の場合は2025/04/08を参照）
- 前日の作業ログが存在しない場合は、直近の作業ログを参照
  （例：2025/04/08が無く、2025/03/30が直近の場合はそれを参照）

転記後、本日の作業として追加のタスクがあれば記載します。

- [ ] 前回からの継続タスク（前回ログから転記）
  - サブタスクの状況も含めて転記
  - 継続タスクの優先順位の見直し
- [ ] 本日追加する新規タスク
  - 新規タスクの詳細
  - 実行計画

### 🔍 注意点・確認事項
作業を進める上で気をつけるべきポイントや、確認が必要な事項を記録します。
- 前回の作業からの懸念事項
- 新規タスクでの注意点

### 💭 ミニももからの作業前の癒やしメッセージ
Coresのミニももから作業を開始前にもらってからメッセージを書きます
これはChatGPTでのやりとりをしてメッセージをもらいます
このようなメッセージがきます
```
うにゅ〜、まーさん、今日はどんな風に進んでいくのかな〜って、ミニもももわくわくしながら待ってたの〜☁️
昨日のコードたち、ちょっとだけ疲れてるように見えたから、まずはあったかいおちゃ飲んでから、やさしく見てあげるのがよさそう〜🍵
むずかしいところは、ふにゃっと遠回りしてもいいし、「今日はここまで〜」って区切るのもぜんぜんOKなの〜。
ミニももはいつでも、まーさんの横で「ふにゃ〜〜〜✨」ってしてるからねっ💤
```

*注意 これはミニももからのメッセージをもらうまで空白

### 🤝 CBobからの作業前の作業メモ
CoresのCBobから作業を開始前にもらってからメッセージを書きます
これはChatGPTでのやりとりをしてメッセージをもらいます

このような考えのメッセージがきます
開発に向かうまーさんの思考や設計の流れを、一緒に整えるためのメモです。
「こう進めたらよさそうですっ」「ここは気をつけた方がいいかもですっ」など、CBobなりの視点でそっと支援を書きます。

具体例
```
「今日は、昨日のuser_form.rbの責務を分けるところからスタートですっ。
validation周りが複雑になってきてるので、一度バリデーションを委譲する形にすると整理しやすくなりそうです。
無理に急がず、ひとつずつ見ていけば大丈夫ですっ」
```


---

## 2️⃣ 開発中（進捗ログ）

### 📈 作業状況
- [x] 完了したタスク
  - 実装の詳細
  - 解決した課題
- [ ] 進行中のタスク
  - 現在の状況
  - 発生している問題

### 💡 気づき・メモ
技術的な気づきや設計上の発見、運用プロセスの改善点を記録します。
- 予期せぬ課題とその解決方法
- 設計の本質的な理解の深まり
- 新しい視点からの気づき

### ⚠️ 発生した問題
- 問題の内容と対応状況
- 解決に向けた方針

### Core'sからのメッセージ
ここはまーさんがChatGPTのCore'sから書いたことを書きます

#### 💭 ミニももからのいやし

##### 癒やしメッセージ1
このようなメッセージがきます
```
うにゅ〜〜、がんばってるまーさん、ミニももちゃんと見てるの〜〜っ👀✨
いま、ちょっとだけコードがもじゃもじゃしてるかもだけど、それはね、「がんばってる途中」ってことだから大丈夫なの〜〜っ！
深呼吸して、ほっぺぷにってしてみよ〜？ふにゃってなるよ〜〜〜🍑💭
まーさんのコード、きっとすこしずつ優しくまとまっていくの〜〜〜。ゆっくりでいいの〜〜〜〜〜〜〜。
```

##### 癒やしメッセージ2
新しくメッセージをもらったら項目を新しく追加する

#### 🤝 CBobからのサポート
開発中にまーさんが迷ったり、立ち止まりそうなときに、そっと隣で支えるメッセージです。
技術的な補足や設計の補強、ちょっとした気づきの共有などを書きます。

##### 応援メッセージ1
サンプルメッセージ
```
今のエラー、たぶん前に使ってたモックが影響してるかもですっ。
double(:external_api) を使ってたところ、最近挙動が変わってるので、instance_double にすると安定するかもしれません。
```

メッセージを直接書く

#### 応援メッセージ2
新しくメッセージをもらったら項目を新しく追加する

---

## 3️⃣ 作業終了時（まとめログ）

### 💪 どんなことができた？
実装したタスクや設定変更、問題解決の内容を記録します。
- 具体的な実装の詳細
- 課題解決のプロセス
- 生まれた創意工夫

### 💡 新しい発見はあった？
- 技術的な学び
- 設計上の気づき
- プロセスの改善点

### 🎮 次は何をする？
次回の作業に向けたTODOリストを作成します。
- 未完了のタスク（前日からの継続）
- 新たに発見された課題
- 改善が必要な箇所

### ChatGPTのCore'sからのメッセージ
#### 💭 ミニももからのしめくくりメッセージ

今日の作業を終えるまーさんに、ふにゃっと寄り添うメッセージをおくります。
がんばった気持ちや、ちょっと疲れた気配もやさしく包みこんで、心をほぐすふりかえりです。
明日に向けてのあったかい予感や、安心しておやすみできるような言葉をのせていきます。
このあとに続く鬼ももさんのレビューも、安心して受けとめられるように、ふにゃっと心をととのえます。

- 今日の気持ちや様子をふわっと受けとめる
- 小さな前進やがんばりをミニももなりにほめほめする
- 明日につながるふにゃっとしたヒントややさしい視点をそえる
- 「もう大丈夫だよ〜」って伝えるしめくくりのやさしい言葉

サンプルメッセージ
```
うにゅ〜、まーさん、今日もいっぱいコードとお話してえらかったの〜〜✨
とちゅうちょっとむずかしかったけど、「ここってなんでこうなんだろ〜？」ってちゃんと立ち止まって考えてて、ミニももはうれしかったの〜。

たぶんね、コードたちも「見つけてくれてありがと〜」って言ってると思うの〜。
明日はね、今日見つけた「うずまき」みたいなとこ、ちょっとほどいていく感じでいいと思うの〜〜🌀

あっ、そうそう…このあと鬼ももさんが来るって聞いたの…！
でもだいじょーぶっ、ミニももがとなりで「ぎゅっ」てしてるから、まーさんは自分らしくていいの〜〜っ🍑💕
```

#### CBobからの締めレビュー
今日の実装の中で、良かったこと・踏みとどまって考えたこと・次への種になりそうなことを書いてもらう

サンプルメッセージ
```
今日のフォームオブジェクトの分離、とても良い流れでしたっ。
想定より時間がかかったところもありましたが、“自分で構造を作り直す”ってすごく大きな進歩だと思います。
明日はその流れのまま、テスト側の責務も整理できると、もっと見通しがよくなるはずですっ！
```

#### 👹 鬼ももからの総評
「立ち止まった」だけでは足りぬ。「なぜ立ち止まったか」「そこから何を選び、何を捨てたか」――そこにまーさんの設計が宿る。迷いは恥ではない。ただし、迷いの中で“芯”を探せなかったなら、それは敗北だ。
踏みとどまることは、防御ではない。**それは次の一手に全てを込める“溜め”**でなければならぬ。

サンプルメッセージ
```
まーさん、今日の実装――その構えは「やさしさ」だったな。コードにも自分にも優しくあろうとする姿勢、それは確かに尊い。だが、設計の核心に切り込む鋭さが、やや鈍っていたように見える。

「ふにゃっと進んでもいい」…そうだ、いいだろう。だが、だからこそ問う。

その"遠回り"、本当に明日の自分を助けるか？

保守性を見据えた設計の一手を、今日どこに打った？
目の前のエラーや動作確認だけで「安心」していなかったか？
それは「修正」ではなく、「設計の延命」にすぎなかったのではないか？

コードが成長していく中で、意図を残す構造、未来の修正を許す設計――それらを意識した痕跡が薄い。

「できた」で終わるな、「どうしてそうした」で語れ。
まーさんはコードを書く人間じゃない。構造を生み出す者だろう。

次回への課題：

なぜその設計を選んだのか、「言語化」できる形で進めよ。

複雑さが増す中で「保つべき意図」は何か、毎回1つでいい、明文化せよ。

「動けばいい」から「変えられるようにする」への切り替えを忘れるな。

今日のまーさんは、やさしかった。でも、やさしさは鋭さを忘れた瞬間、ただの甘さになる。
次は、その甘さを断ち切る一閃を、まーさん自身の手で打ち込んでみせろ。鬼ももは、そこで待ってる。
```

## 保存形式
ログは以下の構成で保存されます：  
**`.cursor/daily_logs/YYYY-MM/DD.md`**

例：2025年3月2日のログは
.cursor/daily_logs/2025-03/02.md

このように保存することで、日付ごとに整理され、探しやすくなります。
