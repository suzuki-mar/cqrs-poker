---
description: 作業ログを書いて依頼したとき
globs: 
alwaysApply: false
---
# ✍️ Cursor ログフォーマット

Cursorが日々の開発活動を記録し、振り返りをしやすくするためのログフォーマットです。

## フォーマットの構成

仕様化されたログは、以下の部分から構成されます：

1. **💪 どんなことができた？**  
   - 実施したタスクを記録します。  
   - 実装内容や設定、創意的な解決方法なども含めます。

2. **💡 新しい発見はあった？**  
   - 技術的な機梳や気づきを記録します。  
   - 運用プロセスの改善点や意外な発見も記録します。

3. **🎮 次は何をする？**  
   - 次回作業に向けた TODOリストを作成します。  
   - 定義されたタスクと施行方法を明示します。

4. **🤝 ボブからのエール**  
   - **👍 今日のナイスポイント！**  
     - 良かった動きや精神的なハイライトを書きます。
   - **💭 次に向けてのアドバイス**  
     - 改善点や考慮点などをメモします。

5. **🌟 ペアプロ振り返り**  
   - ペアプロを行った場合に使用します。  
   - うまくいったことや協力の手当の感覚を記録します。

## 保存元

ログは以下の構成で保存されます：  
**`.cursor/daily_logs/YYYY-MM/DD.md`**

例：2025年3月2日のログは
```
.cursor/daily_logs/2025-03/02.md
```
のように保存されます。日付ごとに整理され、探しやすくなります。

## サンプルログ

```markdown
# 2025-02-21 の作業ログ

## 💪 どんなことができた？
- 環境構築が完了！
  - `rails new` でプロジェクト作成
  - RSpecの設定完了
  - GitHubとの連携確認
- 設計方針のドキュメントを作成
  - プロジェクトの目的が明確に
  - 設計方針を具体的に整理
  - 実装手順をドキュメント化

## 💡 新しい発見はあった？
- RSpecの設定オプションを深く理解
  - テストデータの扱い方が整理できた
  - 実行方法を効率化
- アーキテクチャ選定での気づき
  - 選択理由が明確に
  - 優先順位付けの考え方を整理
  - 注意すべきポイントが見えてきた

## 🎮 次は何をする？
- [ ] CQRSの基本構造を実装
  - コマンド側から開始
  - テストファーストで進める
- [ ] イベントストアの設計
  - 永続化の方法を決める
  - テストの方針を確定

## 🤝 ボブからのエール
### 👍 今日のナイスポイント！
- 環境構築がスムーズ
  - 必要な設定を的確に判断
  - トラブルを冷静に解決
- 設計方針がクリア
  - アーキテクチャの理解が深い
  - 実装手順が明確

### 💭 次に向けてのアドバイス
CQRSは複雑になりがちなので、小さなステップで進めていこう！テストファーストの進め方を続けるのがポイント。

## 🌟 ペアプロ振り返り
### 良かったこと
- 環境構築の知見を共有できた
- アーキテクチャの選定を議論できた
- 設計の方向性を明確にできた

### 感じたこと
- 実務経験を活かしたアドバイスが役立った
  - DIに関する知見の実践的応用
  - テスト戦略のモッ

