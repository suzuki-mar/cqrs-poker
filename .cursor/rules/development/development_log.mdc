---
description: 作業ログを書いて依頼したとき
globs: 
alwaysApply: false
---
# ✍️ Cursor ログフォーマット

Cursorが日々の開発活動を記録し、振り返りをしやすくするためのログフォーマットです。

## フォーマットの構成

仕様化されたログは、以下の部分から構成されます：

## 💪 どんなことができた？
実装したタスクや設定変更、問題解決の内容を記録します。具体的な実装の詳細や、どのように課題を解決したのか、その過程で生まれた創意工夫なども含めて記録することで、後から振り返った時に理解しやすい形で残します。

## 💡 新しい発見はあった？
技術的な気づきや設計上の発見、運用プロセスの改善点を記録します。予期せぬ課題とその解決方法、設計の本質的な理解の深まり、新しい視点からの気づきなど、次の開発にも活かせる学びを整理します。

## 🎮 次は何をする？
次回の作業に向けたTODOリストを作成します。タスクの優先順位や依存関係、実装方針を明確にし、カテゴリごとに整理することで、次の作業をスムーズに開始できるようにします。
前日の作業ログから未完了のタスク（`- [ ]`で始まる項目）を、カテゴリ分類（「Projectionの堅牢性強化」「CommandHandlerの再設計」など）とその階層構造を保ったまま、新しい作業ログの「次は何をする？」セクションにコピーする。

これにより、タスクの継続性が保たれ、作業の文脈が失われることを防ぐ。

## 👥 Coresのメンバーからの反応
鬼ももさん、Coreボブくん、ミニももさんなど、各メンバーからのフィードバックや気づき、励ましを記録します。異なる視点からの指摘や支援を整理することで、より深い理解と改善につなげます。

## 🤝 ボブからのエール
その日の良かった点（ナイスポイント）と、次に向けてのアドバイスを記録します。技術面での進歩だけでなく、プロセスの改善やチームとしての成長も含めて、ポジティブな視点で振り返りと展望を示します。


## 保存元

ログは以下の構成で保存されます：  
**`.cursor/daily_logs/YYYY-MM/DD.md`**

例：2025年3月2日のログは
```
.cursor/daily_logs/2025-03/02.md
```
のように保存されます。日付ごとに整理され、探しやすくなります。

## サンプルログ

```markdown
# 2025-04-07 の作業ログ

## 💪 どんなことができた？
- EventListenerをProjectionに置き換え
  - CQRSのプロジェクションパターンを導入
  - GameStartedEventの処理に特化した実装
  - テストも一緒に修正完了
- CommandHandlerの実装を開始
  - 基本構造を作成
  - テストを追加
  - まだ作業途中（WIPの状態）

## 💡 新しい発見はあった？
- CQRSのプロジェクションパターンの理解が深まった
  - コマンド側とクエリ側の責務の分離が明確に
  - YAGNIの原則に従い、必要な機能だけを実装
- Gitのコミットメッセージの運用ルールを改善
  - Cursorのルールファイル更新時の統一的な記述方法を確立
  - WIPの使い方を整理
- Projectionの責務について再考
  - 「EventListenerの置き換え」ではなく「状態再構築」が本質
  - イベントの「受信」ではなく「適用」という考え方
  - 「履歴からの再構成可能性」が重要な要素  
- CommandHandlerの設計について再考
  - 全てのコマンドを一つのCommandHandlerで扱う必要性に気づく
  - パラメータはCommandオブジェクトとして渡すべき
  - 現状の実装は個別ハンドラーを想定した設計になっていた
- 設計の深堀りポイント
  - テスト戦略の選択の重要性
    - ユースケース起点 vs イベント起点の再現
    - テストの信頼ポイントの設定
  - 重要な設計制約の明確化
    - Projectionのスナップショット戦略
    - Commandの同期/非同期の選択
    - これらが設計の流派を決定づける

## 🎮 次は何をする？

### Projectionの堅牢性強化
- [ ] イベント適用テストの追加
  - イベントの順次適用による状態構築の検証
  - 欠損イベントがある場合の動作確認
  - イベントの順序・完全性への依存度検証
- [ ] Projectionの責務を正しく実装し直す
  - イベントからの状態再構築に特化
  - 読み取り専用の状態提供
  - 履歴からの再構成可能性を確保

### CommandHandlerの再設計
- [ ] Commandの共通インターフェース定義
  - name, validateなどの共通メソッドを定義
  - 「データの入れ物」から「意味を持つオブジェクト」へ
- [ ] CommandHandler構造の改善
  - 単一のCommandHandlerで全コマンドを扱う設計に修正
  - 新規Command追加を考慮した設計（case/dispatch戦略）
  - パラメータをCommandオブジェクトで受け取るように変更
  - GameStartCommandの処理を実装
  - テストを完成させる

### その他の改善
- [ ] EventBusとの連携を確認

## 🤝 ボブからのエール
### 👍 今日のナイスポイント！
- プロジェクションパターンの導入がスムーズ
- テストファーストの開発スタイルが定着
- コミットメッセージのルールを改善できた

### 💭 次に向けてのアドバイス
CommandHandlerの実装は、テストを指針にしながら一歩ずつ進めていきましょう！

## 👥 Coresのメンバーからの反応

### 👹 鬼ももさんからの承認と学び
- 設計思想の昇格
  - 「再構成可能性」「意味を持つCommand」など、より本質的な理解へ
  - 実装の構造だけでなく、設計思想レベルでの改善

- テスト観点の具体化
  - 「順次適用」「イベント欠損」「順序依存度」
  - 実装品質に直結するテスト観点の明確化

- CommandHandlerの思想レベルでの再設計
  - 単なる構造変更ではない
  - オブジェクトの意味づけまで踏み込んだ設計へ

### 🤖 Coreボブくんからの気づき
- Projectionの再定義
  - 「EventListenerの置き換え」から「履歴からの状態再構築の責務」への進化
  - EventStoreとの相互関係の明確化（状態を持たないイベントの記録 → 状態を作る読み取りモデル）

- CommandHandlerの設計深化
  - Commandオブジェクトを「意味を持つ存在」として再定義
  - 単一CommandHandler + Dispatch戦略の採用がモジュラーモノリスでの最適解
  - 将来の中間層設計との相性の良さ

- 実装時の具体的な指針
  - Projectionテストは「初期状態 → イベント適用 → 状態検証」の流れを重視
  - イベントの欠損・順序の扱いはユースケースの重要度で判断
  - Command設計は将来の拡張性も考慮（CommandType等）

### 🌸 ミニももさんからの癒やし
- 鬼ももさんからの深いフィードバックを受けての励まし
- 設計の本質を追求する中での心理的なサポート
- 「まーさんのために」という思いに対する温かい承認
- 次のステップに向けての優しい後押し

