---
description: 
globs: 
alwaysApply: true
---
# 🧪 テストガイドライン

## ✅ 基本原則

- **テストファースト**で開発する

  - 設計の透明性とバグの早期発見を目的とする
  - 曖昧な要件をコードにする前に明確化するためにも活用

- **小さなステップで進める**

  - 一度に大きな変更をしない
  - 各ステップで常に動作する状態を保つ

- **モックの使用は仕様しない**
 - テストダブルによる「テストのねつ造」や「偽仕様」リスクを減らすため
    - モックが返す値を間違えることで、実際の利用時に起きるバグを隠してしまうことがある。
    - 実装とテストの意図がズレたとき、テストの信頼性が下がる。
 - リファクタビリティと設計品質のため
    - 本物同士で動くよう設計すると、「疎結合でシンプルなAPI」「不要な依存がない」構造になりやすい。
    - モック前提になると、APIの分割や協調設計のクセが強くなりがち。

---

## 📝 テストの記述

### 🏷 命名と構造

- テスト名は **日本語で明示的に** 書く
  - **理由：テストの意図が一目で分かり、設計上の意図を自然言語で共有できるため**
  - 例：`it "ユーザーが正しく保存されること"`
- `describe` / `context` / `it` を使って意図を明確に
- **Given-When-Then** を意識：「Xが起きたとき、Yが起きるべき」

### 🧱 テストの構造化

- **Arrange（準備） → Act（実行） → Assert（検証）** の順に書く
- 各ステップ間に空行を入れて視認性を高める
- 1テストに複数のActがある場合は **テストを分割** する

```ruby
it "ユーザーが正しく保存されること" do
  user = build(:user)

  user.save

  expect(user).to be_persisted
end
```

### 🧹 コードの整理

- 各テストは**1つの振る舞いのみ**確認する
- **自己説明的なコード**を心がけ、コメントは最小限に
- セットアップが複雑な場合は簡潔にコメント補足
- 不要な出力（`puts`など）は禁止

---

## 🧪 テストデータの準備

### 🏭 FactoryBotの使い方

- **基本は ****`build`**** を使う**（DBに保存しない）
- `create` を使うのは以下のときのみ：
  - 関連オブジェクトが必要なとき
  - DB依存の機能をテストするとき
  - 外部キー制約などがあるとき
- `create` はパフォーマンスに影響するため、**使用は最小限に**

```ruby
FactoryBot.define do
  factory :event_store do
    event_type { 'game_started' }
    event_data { { key: 'value' }.to_json }
    occurred_at { Time.current }
  end
end
```

### 🤖 モック・スタブの使用

- テスト用のダミークラスはテストケース内に定義する
- 複数のテストで共有する場合は `spec/support` に配置
- 大きくなる場合は別ファイルに分割

```ruby
RSpec.describe SomeClass do
  class DummyCollaborator
    def perform_action
      "dummy result"
    end
  end

  it "ダミーと連携する" do
    dummy = DummyCollaborator.new
    result = subject.work_with(dummy)
    expect(result).to eq("expected result")
  end
end
```

---

## 🧬 特殊なテスト

### 🛡 バリデーションテスト

- バリデーションが機能しているかを検証する（**メッセージ内容には依存しない**）
- `shoulda-matchers` を活用して簡潔に記述
- メッセージ確認は必要な場合のみ

```ruby
RSpec.describe EventStore, type: :model do
  describe 'バリデーション' do
    it { should validate_presence_of(:event_type) }

    it '不正なJSONは無効であること' do
      event_store = build(:event_store, event_data: 'invalid_json')
      expect(event_store).not_to be_valid
    end
  end
end
```

### 🔬 スパイクテスト

- 新しいGemや外部APIを試すための実験用テスト
- `spec/spikes` に配置し、ファイル名は `*_spike_spec.rb`
- `type: :spike` を明示

#### 利用シーン

- 新しいgemの導入検討
- 外部API連携の挙動確認

#### 制約

- 本番コードに依存しすぎないこと

```ruby
# typed: true
require 'rails_helper'

RSpec.describe "NewFeatureSpike", type: :spike do
  class TemporaryClass
    def some_method
      # 実験的な実装
    end
  end

  it "新機能の検証" do
    # 実験的な実装のテスト
  end
end
```

---

## 🚦 テスト実行のルール

- テストは **直近で編集したファイルに対応するspecのみ実行**
- 例：`app/domains/event_store_domain.rb` を編集した場合は
  → `spec/domains/event_store_domain_spec.rb` を実行する

以下のとおり、先ほどの「RSpec関連4項目」を**新しいテストガイドラインの書式**に合わせて全面リライトしました。  
各項目は **#…##…###** の階層、アイコン付きセクション名、箇条書きの粒度、コードブロックの余白などをガイドラインと統一しています。

---

## ✅ RSpecのsubject活用パターン
* そのテストでは何をテストの対象とするためにテストで実行するものはsubjectを使う
* そのときにsubjectに名前をつけるのは、一つのテストで複数のテストで実行するものが存在することになりかねないので禁止

```ruby
OK
subject { hoge.execute }

NG
subject(:hoge) { hoge.execute }

```

## letについて
* letは必要な項目だけを書く
* 即時実行のほうがテストの理解があがるので let! を使って即時実行をする
* `let` は **繰り返し参照** するものだけ


```
OK
let!(:command) do
    card = build(:card)
    Command.new(card)
end

NG
let(:card) { build(:card) }
let(:command) { Command.new(card) }

---

