---
description: 
globs: 
alwaysApply: true
---
# クラス実装ガイドライン

## ディレクトリ構成とファイル配置

### 禁止されるディレクトリ名

以下のディレクトリ名の使用は避けましょう：

- **services**："service" という用語は曖昧で、責務が不明確になりがちです。より具体的な役割を示す名前を使用してください。
  - ❌ 悪い例: `app/services/user_registration_service.rb`
  - ✅ 良い例: `app/commands/register_user_command.rb`

- **helpers**：ヘルパーは無関係なロジックの集積所になりやすいです。より説明的な名前にしましょう。
  - ❌ 悪い例: `app/helpers/date_helper.rb`
  - ✅ 良い例: `app/formatters/date_formatter.rb`

- **utils/utilities**：ユーティリティクラスは責務が曖昧になりがちです。より具体的な名前を使いましょう。
  - ❌ 悪い例: `app/utils/string_utils.rb`
  - ✅ 良い例: `app/formatters/string_formatter.rb`

### 理由

「services」「helpers」「utilities」といった名前は、クラスの責務を明確に表現しません。これらのディレクトリには様々な種類のロジックが混在し、一貫性が損なわれがちです。

より具体的な名前を使うことで、以下のようなメリットがあります：

1. **責務の明確化** – クラスの役割が明瞭になる。
2. **発見しやすさの向上** – コードが探しやすくなる。
3. **一貫性の確保** – アプリ全体で設計の原則が統一される。
4. **コード配置の指針** – 新しいコードの置き場所が判断しやすくなる。

---

## 重複の回避

### 原則

- 同じ情報を複数の場所で管理しない。
- 情報は1箇所で定義し、必要なところで参照する。
- 可能な限り自動化を活用して、コードとドキュメントの同期を保つ。

#### コード管理のポイント

- 定数や設定値は1つの場所に定義する。
  - 例：`VALID_RANKS = ['HIGH_CARD', 'ONE_PAIR', ...]` をモデルで定義し、テストで参照する。
- 共通ロジックは特定用途のクラスに抽出する（汎用ヘルパー／サービスにはしない）。
  - 例：認証ロジックは `AuthenticationService` などにまとめる。
- 再利用可能なテストデータはファクトリで定義する。
  - 例：`FactoryBot.define { factory :user do ... end }`

### 重複への対応手順

1. 信頼できる単一の定義元（Single Source of Truth）を特定する。
2. 他の定義はその参照に置き換える。
3. 可能であれば同期を自動化する。
4. 重複が避けられない場合は、明確な理由をコメントに記述する。

---

## コメントスタイル

### 「翻訳コメント」は書かない（コードの内容をそのまま日本語で説明するようなコメント）

良いコメントとは、「なぜこのコードがこう書かれているのか」という背景や、コードからは読み取れない意図を説明するものです。

#### 良い例
```ruby
# 高可用性とスケーラビリティの観点から AWS SNS を選定
def send_notification(user, message)
  return unless user.prefers_notifications?
  AwsSnsService.deliver(user, message)
end
```

#### 悪い例
```ruby
# 通知を送る
def send_notification(user, message)
  return unless user.prefers_notifications?
  AwsSnsService.deliver(user, message)
end
```

---

## 適切なエラーハンドリング

### 主な学び

- 特に JSON のパースや型依存の処理を行う前には、必ず `nil` をチェックする。
  - 例：`return false if json.nil?`
- 例外が発生する可能性のある箇所では `rescue` を使って明示的に処理する。
  - 例：`rescue JSON::ParserError`

#### 例
```ruby
def valid_json?(json)
  return false if json.nil?  # nil チェックを必ず行う
  JSON.parse(json)
  true
rescue JSON::ParserError
  false
end
```

---

## コマンドパターンの実装

### 主な学び

- コマンドクラスは単一責任の原則（SRP）を守る。
- 依存は初期化時に注入し、実行時のパラメータは最小限に。
- 公開インターフェースとして `execute` メソッドを使用する。

#### 例
```ruby
class GameStartCommand
  def initialize(event_store)
    @event_store = event_store
  end

  def execute
    @event_store.publish("game_started")
  end
end
```

