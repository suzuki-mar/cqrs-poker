---
description: 
globs: 
alwaysApply: false
---
プロジェクトの進行に伴い、Ruby 特有の実装規約が随時追加されていきます。

# クラス実装ガイドライン

## ActiveRecord

### バリデーションメソッドの命名規則

#### 主な学び
- **バリデーションメソッド名には対象のフィールドを含めること。**  
  - 例：`validate_occurred_at_not_future_date`  
  - どのフィールドに対するバリデーションかが一目で分かるようにする。

- **メソッド名はバリデーションロジックの内容を明確に示すこと。**  
  - `validate_occurred_at` のような曖昧な名前ではなく、`validate_occurred_at_not_future_date` のように具体的に。  
  - 何をチェックしているかが名前からわかるようにする。

- **バリデーションの宣言と、ロジックの実装を分離する。**  
  - 例：  
    - `valid_json_...

## ファンクショナルクラスの実装

### メソッド名の規約
- Commandパターンを実装する場合は`call`ではなく`execute`を使用する
- `execute`の方がCommandパターンの意図をより明確に表現できる

#### 例
```ruby
# 良い例：executeを使用
class GameStartCommand
  def self.execute(deck)
    new(deck).execute
  end

  private :initialize

  def initialize(deck)
    @deck = deck
  end

  def execute
    initial_hand = deck.generate_hand_set
    GameStartedEvent.new(initial_hand)
  end
end
```

### インスタンス変数の定義
- インスタンス変数は必ずattr_readerで定義する
- インスタンス変数への直接アクセスは避ける
- attr_readerは必要になるまではprivateとして定義する

#### 例
```ruby
# 良い例
class GameStartCommand
  def self.execute(deck)
    new(deck).execute
  end

  private :initialize

  def initialize(deck)
    @deck = deck
  end

  def execute
    initial_hand = deck.generate_hand_set  # attr_readerを通してアクセス
    GameStartedEvent.new(initial_hand)
  end

  private

  attr_reader :deck
end
```    

