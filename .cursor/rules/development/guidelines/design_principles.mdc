---
description: 
globs: 
alwaysApply: false
---
# 設計原則（Design Principles）

## YAGNI (You Aren't Gonna Need It)
必要になるまで機能を実装しない原則。将来必要になるかもしれないという理由だけで機能を実装すると、無駄な複雑さが増し、メンテナンスコストが高くなる。

例: `GameStateDomain`クラスで、現時点で必要ない`exchange_cards`メソッドを実装せず、必要になった時点で追加する。

これにより：
- コードがシンプルになる
- 開発速度が上がる
- 不要な機能のバグやメンテナンスコストを避けられる

## 責務の分離
各クラスは明確に定義された単一の責務を持つべきという原則。特に、ドメインロジックとデータアクセスの責務は分離すべき。

例: `GameState`モデル（ActiveRecord）にドメインロジックを漏らさず、`GameStateDomain`クラスがドメインオブジェクト（`Hand`）とデータモデルの間の変換を担当する。

これにより：
- コードの凝集度が高まる
- 変更の影響範囲が限定される
- テストが容易になる
- ドメインモデルの純粋性が保たれる

## コードの簡潔さ
コードは可能な限り簡潔に保ち、不要な複雑さを避けるべき。特に、不要なコメントや説明的な変数名は避け、コード自体が自己説明的であるようにする。

例: `GameStateDomain`クラスから不要なメソッドやコメントを削除し、必要最小限のコードだけを残す。

これにより：
- コードの可読性が向上する
- メンテナンスが容易になる
- バグの発生確率が減少する
- 新しい開発者がコードを理解しやすくなる

## 実装の優先順位
全体の設計や将来の拡張性が見えていても、現在必要な機能だけを実装することを優先する。

例: `Hand`クラスで、現時点で不要な値オブジェクトとしての機能（`==`や`hash`メソッド）を実装せず、必要になった時点で追加する。

これにより：
- 本当に必要な機能に集中できる
- コードがシンプルに保たれる
- 不要な複雑さが入り込むのを防げる
- 実際の要件に基づいた設計ができる

## Railsにおけるリポジトリパターン
Railsでは、ActiveRecordを直接利用するのが一般的で、リポジトリパターンを使わないことが推奨される。ActiveRecordは既にデータアクセス層を抽象化しており、リポジトリパターンを導入すると冗長になりがちである。

これにより：
- コードの簡潔さが保たれる
- ActiveRecordの機能を最大限に活用できる
- 開発速度が向上する
- メンテナンスが容易になる
- Railsのエコシステムからの恩恵を最大限に受けられる

## RailsWayとエコシステムのバランス
Railsで開発する際は、RailsWayに従いすぎず、エコシステムの恩恵を受けることが重要。RailsWayは強力なガイドラインを提供するが、プロジェクトの要件によっては柔軟に対応する必要がある。

これにより：
- Railsの強力な機能を最大限に活用できる
- プロジェクトの要件に応じた柔軟な設計が可能になる
- 開発速度が向上する
- メンテナンスが容易になる
- Railsのエコシステムからの恩恵を最大限に受けられる