---
description: 
globs: 
alwaysApply: true
---
## RSpec 実装ガイドライン（詳細）

### ActiveRecord モデルのテスト
- 例外を除き、FactoryBot の `create` ではなく `build` を使用。
- テスト内でモデルインスタンスを直接生成しない。
- バリデーションとスコープの動作を検証する。
- DB依存のテストでは、適切なセットアップとクリーンアップを行う。


#### 例：
```ruby
# 良い例
let(:user) { create(:user) }

# 特殊な場合を除いて避ける
let(:user) { User.new(name: 'Test User', email: 'test@example.com') }

it "email の presence を検証する" do
  user.email = ""
  expect(user).to be_invalid
end
```

---

### ドメインクラスのテスト
- 依存関係がある場合は適切にモックする。
- 期待される振る舞いをテストする。

#### 例：
```ruby
# 1. まずは失敗するテストを書く
describe StartGameUseCase do
  it 'ゲームを開始できること' do
    result = described_class.execute
    expect(result.success?).to be true
    expect(result.game).to be_a(Game)
  end
end

# 2. 通すための最小実装
class StartGameUseCase
  def self.execute
    Result.new(success: true, game: Game.new)
  end
end

# 3. 必要に応じてリファクタ
```

---

### コントローラのテスト
- リクエストスペックを中心に行う。
- レスポンスのステータスコードとペイロードを検証する。
- 認証・認可のテストも含める。

#### 例：
```ruby
describe "POST /login" do
  it "ログイン成功時に 200 を返す" do
    post login_path, params: { email: user.email, password: 'password' }
    expect(response).to have_http_status(:ok)
  end
end
```

---

### 振る舞いベースのテスト
- 実装の詳細ではなく、振る舞いの結果を検証する。
- 内部メソッドの呼び出しに対する `receive` ベースの期待値は避ける。

#### 例：
```ruby
# 避けるべき例（実装依存）
expect(record).to receive(:save)

# 推奨（結果に注目）
expect(record.current_turn).to eq(2)
```

---

### 実装依存の回避例
- テストで定数を再定義せず、実装からの定数を使用する。

#### 例：
```ruby
# 推奨
it { should validate_inclusion_of(:current_rank).in_array(GameState::VALID_RANKS) }

# 避けるべき例（テスト内で定義）
VALID_RANKS = ['HIGH_CARD', 'ONE_PAIR', ...]
it { should validate_inclusion_of(:current_rank).in_array(VALID_RANKS) }
```

---

### スパイクテストの活用
- 振る舞いを探索するための実験的コードを一時的に書く。
- 本番コードに入れる前にリファクタまたは削除する。

#### 例：
```ruby
describe "CLI インターフェースのスパイク" do
  it "ゲームの状態を正しく表示できること", :skip do
    # 実験コード
    cli = CLI.new
    output = cli.display_game_status(game)
    puts output  # 手動で出力を確認

    # 本番前にこのテストはリファクタまたは削除すること
  end
end
```

---

### バリデーションテストの指針

モデルが正しくバリデーションを行っているかを確認する：

- エラーメッセージの文言には依存しない。
- オブジェクトが有効か無効かだけを確認する。
- `expect(model).not_to be_valid` または `expect(model).to be_invalid` を使用する。

#### 例：
```ruby
describe "event_type" do
  it 'nil の場合は無効であること' do
    event_store = build(:event_store, event_type: nil)
    expect(event_store).not_to be_valid
  end
end
```

---

### shoulda-matchers の活用

`shoulda-matchers` を使うことで、表現力が高く簡潔なモデルテストが書ける：

- バリデーション・関連・DBスキーマのテストに最適。
- ボイラープレートを削減し、テストの可読性を向上。

#### 例：
```ruby
describe User do
  it { should validate_presence_of(:email) }
  it { should validate_uniqueness_of(:email).case_insensitive }
  it { should have_many(:posts) }
end
```

よりクリーンで保守しやすいテストコードのために、`shoulda-matchers` の導入を検討しよう。

### ドメインクラスのテスト
- 実際のデータベース更新をテストすべき
- モックやスタブを使わず、実際のデータベースを使用することで、より現実的なテストになる
- 依存関係がある場合は適切にモックする
- 期待される振る舞いをテストする

例: `GameStateDomain`クラスのテストでは、`GameState`のモックを使わず、実際にデータベースに保存されたデータを検証する。

これにより：
- 実際のアプリケーションの動作に近いテストができる
- データベースとの連携に関する問題を早期に発見できる
- 統合テストの要素を持ち、より信頼性の高いテストになる

