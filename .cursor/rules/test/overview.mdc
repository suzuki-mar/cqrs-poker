---
description: 
globs: 
alwaysApply: true
---
# 🧪 テストガイドライン

## ✅ 基本原則

- **テストファースト**で開発する

  - 設計の透明性とバグの早期発見を目的とする
  - 曖昧な要件をコードにする前に明確化するためにも活用

- **小さなステップで進める**

  - 一度に大きな変更をしない
  - 各ステップで常に動作する状態を保つ

- **モックの使用は最小限に**

  - 実オブジェクトをできる限り使う
  - 明確な外部依存（HTTP通信、サードパーティAPI、メール送信等）のみモック対象とする
  - Rails内部のServiceやJobは原則モックしない

---

## 📝 テストの記述

### 🏷 命名と構造

- テスト名は **日本語で明示的に** 書く
  - **理由：テストの意図が一目で分かり、設計上の意図を自然言語で共有できるため**
  - 例：`it "ユーザーが正しく保存されること"`
- `describe` / `context` / `it` を使って意図を明確に
- **Given-When-Then** を意識：「Xが起きたとき、Yが起きるべき」

### 🧱 テストの構造化

- **Arrange（準備） → Act（実行） → Assert（検証）** の順に書く
- 各ステップ間に空行を入れて視認性を高める
- 1テストに複数のActがある場合は **テストを分割** する

```ruby
it "ユーザーが正しく保存されること" do
  # Arrange
  user = build(:user)

  # Act
  user.save

  # Assert
  expect(user).to be_persisted
end
```

### 🧹 コードの整理

- 各テストは**1つの振る舞いのみ**確認する
- **自己説明的なコード**を心がけ、コメントは最小限に
- セットアップが複雑な場合は簡潔にコメント補足
- 不要な出力（`puts`など）は禁止

---

## 🧪 テストデータの準備

### 🏭 FactoryBotの使い方

- **基本は ****`build`**** を使う**（DBに保存しない）
- `create` を使うのは以下のときのみ：
  - 関連オブジェクトが必要なとき
  - DB依存の機能をテストするとき
  - 外部キー制約などがあるとき
- `create` はパフォーマンスに影響するため、**使用は最小限に**

```ruby
FactoryBot.define do
  factory :event_store do
    event_type { 'game_started' }
    event_data { { key: 'value' }.to_json }
    occurred_at { Time.current }
  end
end
```

### 🤖 モック・スタブの使用

- テスト用のダミークラスはテストケース内に定義する
- 複数のテストで共有する場合は `spec/support` に配置
- 大きくなる場合は別ファイルに分割

```ruby
RSpec.describe SomeClass do
  class DummyCollaborator
    def perform_action
      "dummy result"
    end
  end

  it "ダミーと連携する" do
    dummy = DummyCollaborator.new
    result = subject.work_with(dummy)
    expect(result).to eq("expected result")
  end
end
```

---

## 🧬 特殊なテスト

### 🛡 バリデーションテスト

- バリデーションが機能しているかを検証する（**メッセージ内容には依存しない**）
- `shoulda-matchers` を活用して簡潔に記述
- メッセージ確認は必要な場合のみ

```ruby
RSpec.describe EventStore, type: :model do
  describe 'バリデーション' do
    it { should validate_presence_of(:event_type) }

    it '不正なJSONは無効であること' do
      event_store = build(:event_store, event_data: 'invalid_json')
      expect(event_store).not_to be_valid
    end
  end
end
```

### 🔬 スパイクテスト

- 新しいGemや外部APIを試すための実験用テスト
- `spec/spikes` に配置し、ファイル名は `*_spike_spec.rb`
- `type: :spike` を明示

#### 利用シーン

- 新しいgemの導入検討
- 外部API連携の挙動確認

#### 制約

- 本番コードに依存しすぎないこと



```ruby
# typed: true
require 'rails_helper'

RSpec.describe "NewFeatureSpike", type: :spike do
  class TemporaryClass
    def some_method
      # 実験的な実装
    end
  end

  it "新機能の検証" do
    # 実験的な実装のテスト
  end
end
```

---

## 🚦 テスト実行のルール

- テストは **直近で編集したファイルに対応するspecのみ実行**
- 例：`app/domains/event_store_domain.rb` を編集した場合は
  → `spec/domains/event_store_domain_spec.rb` を実行する

以下のとおり、先ほどの「RSpec関連4項目」を**新しいテストガイドラインの書式**に合わせて全面リライトしました。  
各項目は **#…##…###** の階層、アイコン付きセクション名、箇条書きの粒度、コードブロックの余白などをガイドラインと統一しています。

---

# 🧪 RSpecテストガイドライン（詳細編）

## ✅ aggregate_failuresの適切な使い方

### 📌 学んだこと
- `aggregate_failures` ブロックは **Assert（検証）専用** とする  
- **Arrange → Act** はブロックの外側へ  
- 意図と流れが分離され、テスト構造が明確になる

### 🧪 コード例
```ruby
# ✅ Good：検証のみaggregate_failuresに入れる
it "ゲームが正しく開始されること" do
  # Arrange
  command = GameStartCommand.new

  # Act
  command_handler.handle(command)

  # Assert
  aggregate_failures do
    expect(logger.messages_for_level(:info)).to include(/イベント受信: ゲーム開始/)
    expect(GameState.last.status).to eq("started")
  end
end

# ❌ Bad：Actまでブロック内に含めている
# ❌ Bad：Assertがブロック外に残っている
```

---

## ✅ RSpecのsubject活用パターン

### 📌 学んだこと
- `subject` は **Act の共通化** と **可読性向上** に有用  
- 基本は **無名 subject { … }**  
- `let`／`before` と役割を分ける

### 🧪 ポイント
- 「テストの主役（Act）」を一本化して **構造を整理**  
- contextごとの再定義でバリエーションを表現

---

## ✅ subject / let / context ベストプラクティス

### 📌 ベストな使い方
- **subject**：共通の実行（Act）  
- **let**：状況依存データ（Arrange）  
- **context**：前提条件の切替え

### 🧪 コード例
```ruby
subject { command_handler.handle(Command.new, CommandContext.build_for_exchange(card)) }

context "正常系" do
  let(:card) { Card.new(current_hand.first) }

  it "CardExchangedEvent が発行されること" do
    expect(subject).to be_a(CardExchangedEvent)
  end
end

context "異常系（手札に存在しないカード）" do
  let(:card) { Card.new("♠A") }

  it "InvalidCommandEvent が発行されること" do
    expect(subject).to be_a(InvalidCommandEvent)
  end
end
```

---

## ✅ let の最小化と依存関係の整理

### 📌 学んだこと
- `let` は **繰り返し参照** するものだけ  
- 依存オブジェクトは **ひとまとめ** に定義  
- 一時データはローカル変数で十分

### 🧪 コード例
```ruby
# ✅ Good：依存をlet内部でまとめる
let(:log_event_listener) do
  logger = TestLogger.new
  LogEventListener.new(logger)
end

# ❌ Bad：細かく分割してletを乱用
let(:logger) { TestLogger.new }
let(:log_event_listener) { LogEventListener.new(logger) }
```

以下のとおり、**番号を削除**し、**見出しを1段階上げ**てフォーマットを統一しました。

---

## ✅ テストダブルの使用制限

### 📌 学んだこと
- テスト用の偽物は **原則使わない**
- 本物クラスの利用を優先

### 📌 理由
- 実際に近いテストになる
- 実装変更に対する耐性が高い
- コードの信頼性が増す

### 🧪 コード例
```ruby
# ❌ Bad
class TestEventListener
  def handle_event(event)
    @received_events << event
  end
end

# ✅ Good
let(:event_listener) { LogEventListener.new }
```

### 📌 例外
- 記録用に実装パターンを残したいとき
- ライブラリ提供の double（RSpec の `double` 等）

